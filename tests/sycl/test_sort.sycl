/**
 * traccc library, part of the ACTS project (R&D line)
 *
 * (c) 2024 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

#include <gtest/gtest.h>

#include <CL/sycl.hpp>
#include <vecmem/memory/sycl/shared_memory_resource.hpp>
#include <vecmem/memory/unique_ptr.hpp>

#include "../../sycl/src/utils/barrier.hpp"
#include "traccc/device/sort.hpp"
#include "traccc/sycl/utils/thread_id.hpp"

TEST(SYCLSort, BlockOddEvenSort) {
    vecmem::sycl::shared_memory_resource mr;
    cl::sycl::queue queue;

    uint32_t n = 2803;
    vecmem::unique_alloc_ptr<uint32_t[]> arr =
        vecmem::make_unique_alloc<uint32_t[]>(mr, n);

    // As long as 13 and n_keys are coprime, this will generate a big,
    // non-sorted array containing every element.
    for (uint32_t i = 0; i < n; i++) {
        arr[i] = (13 * 500 * i) % n;
    }

    cl::sycl::nd_range test_range(cl::sycl::range<1>(128),
                                  cl::sycl::range<1>(128));

    queue
        .submit([&, keys = arr.get()](cl::sycl::handler &h) {
            h.parallel_for<class BlockOddEvenSortKernel>(
                test_range, [=](cl::sycl::nd_item<1> item) {
                    traccc::sycl::thread_id1 thread_id(item);
                    traccc::sycl::barrier barrier(item);
                    traccc::device::blockOddEvenSort(thread_id, barrier, keys,
                                                     n, std::less<uint32_t>());
                });
        })
        .wait_and_throw();

    for (uint32_t i = 0; i < n; ++i) {
        ASSERT_EQ(arr[i], i);
    }
}
