/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2024-2025 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// Test include(s).
#include "test_queue.hpp"
#include "tests/ckf_telescope_test.hpp"
#include "traccc/utils/seed_generator.hpp"

// Project include(s).
#include "traccc/device/container_d2h_copy_alg.hpp"
#include "traccc/device/container_h2d_copy_alg.hpp"
#include "traccc/io/read_detector.hpp"
#include "traccc/io/read_measurements.hpp"
#include "traccc/io/utils.hpp"
#include "traccc/simulation/simulator.hpp"
#include "traccc/sycl/finding/combinatorial_kalman_filter_algorithm.hpp"
#include "traccc/utils/event_data.hpp"
#include "traccc/utils/ranges.hpp"

// detray include(s).
#include "detray/propagator/propagator.hpp"
#include "detray/test/utils/simulation/event_generator/track_generators.hpp"

// VecMem include(s).
#include <vecmem/memory/host_memory_resource.hpp>
#include <vecmem/memory/sycl/device_memory_resource.hpp>
#include <vecmem/memory/sycl/shared_memory_resource.hpp>
#include <vecmem/utils/sycl/async_copy.hpp>

// GTest include(s).
#include <gtest/gtest.h>

// System include(s).
#include <filesystem>
#include <string>

namespace traccc {

TEST_P(CkfCombinatoricsTelescopeTests, Run) {

    // Get the parameters
    const std::string name = std::get<0>(GetParam());
    const std::array<scalar, 3u> origin = std::get<1>(GetParam());
    const std::array<scalar, 3u> origin_stddev = std::get<2>(GetParam());
    const std::array<scalar, 2u> mom_range = std::get<3>(GetParam());
    const std::array<scalar, 2u> eta_range = std::get<4>(GetParam());
    const std::array<scalar, 2u> theta_range = eta_to_theta_range(eta_range);
    const std::array<scalar, 2u> phi_range = std::get<5>(GetParam());
    const detray::pdg_particle<scalar> ptc = std::get<6>(GetParam());
    const unsigned int n_truth_tracks = std::get<7>(GetParam());
    const unsigned int n_events = std::get<8>(GetParam());
    const bool random_charge = std::get<9>(GetParam());

    /*****************************
     * Build a telescope geometry
     *****************************/

    // SYCL queue.
    sycl::test_queue queue;

    // Only run this test on NVIDIA and AMD backends.
    if (!(queue.is_cuda() || queue.is_hip())) {
        GTEST_SKIP();
    }

    // Memory resources used by the application.
    vecmem::host_memory_resource host_mr;
    vecmem::sycl::device_memory_resource device_mr{queue.queue().queue()};
    traccc::memory_resource mr{device_mr, &host_mr};
    vecmem::sycl::shared_memory_resource shared_mr{queue.queue().queue()};

    // Path to the working directory.
    const std::filesystem::path path = std::filesystem::current_path() / name;

    // Read in the detector geometry that was generated by the test fixture.
    host_detector_type host_det{shared_mr};
    traccc::io::read_detector(
        host_det, shared_mr,
        (path / "telescope_detector_geometry.json").native(),
        (path / "telescope_detector_homogeneous_material.json").native(), "");

    auto field =
        detray::bfield::create_const_field<host_detector_type::scalar_type>(
            std::get<13>(GetParam()));

    // Detector view object
    auto det_view = detray::get_data(host_det);

    /***************************
     * Generate simulation data
     ***************************/

    // Track generator
    using generator_type =
        detray::random_track_generator<traccc::free_track_parameters,
                                       uniform_gen_t>;
    generator_type::configuration gen_cfg{};
    gen_cfg.n_tracks(n_truth_tracks);
    gen_cfg.origin(origin);
    gen_cfg.origin_stddev(origin_stddev);
    gen_cfg.phi_range(phi_range[0], phi_range[1]);
    gen_cfg.theta_range(theta_range[0], theta_range[1]);
    gen_cfg.mom_range(mom_range[0], mom_range[1]);
    gen_cfg.randomize_charge(random_charge);
    generator_type generator(gen_cfg);

    // Smearing value for measurements
    traccc::measurement_smearer<traccc::default_algebra> meas_smearer(
        smearing[0], smearing[1]);

    using writer_type = traccc::smearing_writer<
        traccc::measurement_smearer<traccc::default_algebra>>;

    typename writer_type::config smearer_writer_cfg{meas_smearer};

    // Run simulator
    auto sim = traccc::simulator<host_detector_type, b_field_t, generator_type,
                                 writer_type>(
        ptc, n_events, host_det, field, std::move(generator),
        std::move(smearer_writer_cfg), path.native());
    sim.get_config().propagation.navigation.overstep_tolerance =
        -100.f * unit<float>::um;
    sim.get_config().propagation.navigation.max_mask_tolerance =
        1.f * unit<float>::mm;
    sim.run();

    /*****************************
     * Do the reconstruction
     *****************************/

    // Copy objects
    vecmem::sycl::async_copy copy{queue.queue().queue()};

    traccc::device::container_d2h_copy_alg<
        traccc::track_candidate_container_types>
        track_candidate_d2h{mr, copy};

    traccc::device::container_d2h_copy_alg<traccc::track_state_container_types>
        track_state_d2h{mr, copy};

    // Seed generator
    seed_generator<host_detector_type> sg(host_det, stddevs);

    // Finding algorithm configuration
    traccc::sycl::combinatorial_kalman_filter_algorithm::config_type
        cfg_no_limit;
    cfg_no_limit.ptc_hypothesis = ptc;
    cfg_no_limit.max_num_branches_per_seed = 100000;
    cfg_no_limit.chi2_max = 30.f;
    cfg_no_limit.propagation.navigation.overstep_tolerance =
        -100.f * unit<float>::um;
    cfg_no_limit.propagation.navigation.max_mask_tolerance =
        1.f * unit<float>::mm;

    traccc::sycl::combinatorial_kalman_filter_algorithm::config_type cfg_limit;
    cfg_limit.ptc_hypothesis = ptc;
    cfg_limit.max_num_branches_per_seed = 500;
    cfg_limit.chi2_max = 30.f;
    cfg_limit.propagation.navigation.overstep_tolerance =
        -100.f * unit<float>::um;
    cfg_limit.propagation.navigation.max_mask_tolerance = 1.f * unit<float>::mm;

    // Finding algorithm object
    traccc::sycl::combinatorial_kalman_filter_algorithm device_finding{
        cfg_no_limit, mr, copy, queue.queue()};
    traccc::sycl::combinatorial_kalman_filter_algorithm device_finding_limit{
        cfg_limit, mr, copy, queue.queue()};

    // Iterate over events
    for (std::size_t i_evt = 0; i_evt < n_events; i_evt++) {

        // Truth Track Candidates
        traccc::event_data evt_data(path, i_evt, host_mr);

        traccc::track_candidate_container_types::host truth_track_candidates =
            evt_data.generate_truth_candidates(sg, host_mr);

        ASSERT_EQ(truth_track_candidates.size(), n_truth_tracks);

        // Prepare truth seeds
        traccc::bound_track_parameters_collection_types::host seeds(&host_mr);
        for (unsigned int i_trk = 0; i_trk < n_truth_tracks; i_trk++) {
            seeds.push_back(truth_track_candidates.at(i_trk).header);
        }
        ASSERT_EQ(seeds.size(), n_truth_tracks);

        traccc::bound_track_parameters_collection_types::buffer seeds_buffer{
            static_cast<unsigned int>(seeds.size()), mr.main};
        copy.setup(seeds_buffer)->wait();
        copy(vecmem::get_data(seeds), seeds_buffer,
             vecmem::copy::type::host_to_device)
            ->wait();

        // Read measurements
        traccc::measurement_collection_types::host measurements_per_event{
            &host_mr};
        traccc::io::read_measurements(measurements_per_event, i_evt,
                                      path.native());

        traccc::measurement_collection_types::buffer measurements_buffer(
            static_cast<unsigned int>(measurements_per_event.size()), mr.main);
        copy.setup(measurements_buffer)->wait();
        copy(vecmem::get_data(measurements_per_event), measurements_buffer)
            ->wait();

        // Run device finding
        auto track_candidates_buffer =
            device_finding(det_view, field, measurements_buffer, seeds_buffer);

        // Run device finding (Limit)
        auto track_candidates_limit_buffer = device_finding_limit(
            det_view, field, measurements_buffer, seeds_buffer);

        traccc::track_candidate_container_types::host track_candidates =
            track_candidate_d2h(track_candidates_buffer);
        traccc::track_candidate_container_types::host track_candidates_limit =
            track_candidate_d2h(track_candidates_limit_buffer);

        // Make sure that the number of found tracks = n_track ^ (n_planes + 1)
        EXPECT_GT(track_candidates.size(), track_candidates_limit.size());
        EXPECT_EQ(track_candidates.size(),
                  std::pow(n_truth_tracks, std::get<11>(GetParam()) + 1));
        EXPECT_EQ(track_candidates_limit.size(),
                  n_truth_tracks * cfg_limit.max_num_branches_per_seed);
    }
}

INSTANTIATE_TEST_SUITE_P(
    SYCLCkfCombinatoricsTelescopeValidation, CkfCombinatoricsTelescopeTests,
    ::testing::Values(
        std::make_tuple("telescope_combinatorics_twin",
                        std::array<scalar, 3u>{0.f, 0.f, 0.f},
                        std::array<scalar, 3u>{0.f, 0.f, 0.f},
                        std::array<scalar, 2u>{100.f, 100.f},
                        std::array<scalar, 2u>{0.f, 0.f},
                        std::array<scalar, 2u>{0.f, 0.f},
                        detray::muon<scalar>(), 2, 1, false, 20.f, 9u, 20.f,
                        vector3{2 * detray::unit<scalar>::T, 0, 0}),
        std::make_tuple("telescope_combinatorics_trio",
                        std::array<scalar, 3u>{0.f, 0.f, 0.f},
                        std::array<scalar, 3u>{0.f, 0.f, 0.f},
                        std::array<scalar, 2u>{100.f, 100.f},
                        std::array<scalar, 2u>{0.f, 0.f},
                        std::array<scalar, 2u>{0.f, 0.f},
                        detray::muon<scalar>(), 3, 1, false, 20.f, 9u, 20.f,
                        vector3{2 * detray::unit<scalar>::T, 0, 0})));

}  // namespace traccc
