/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2023-2024 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// Project include(s).
#include "traccc/definitions/common.hpp"
#include "traccc/sycl/clusterization/clusterization_algorithm.hpp"

// VecMem include(s).
#include <vecmem/memory/sycl/shared_memory_resource.hpp>
#include <vecmem/utils/sycl/copy.hpp>

// GTest include(s).
#include <gtest/gtest.h>

using namespace traccc;

// Simple asynchronous handler function
auto handle_async_error = [](::sycl::exception_list elist) {
    for (auto& e : elist) {
        try {
            std::rethrow_exception(e);
        } catch (::sycl::exception& e) {
            std::cout << "ASYNC EXCEPTION!!\n";
            std::cout << e.what() << "\n";
        }
    }
};

TEST(SYCLClustering, SingleModule) {

    // Memory resource used by the EDM.
    vecmem::sycl::shared_memory_resource shared_mr;
    traccc::memory_resource mr{shared_mr};

    // Creating SYCL queue object
    ::sycl::queue q(handle_async_error);
    std::cout << "Running Seeding on device: "
              << q.get_device().get_info<::sycl::info::device::name>() << "\n";

    // Copy object
    vecmem::sycl::copy copy{&q};

    // Create cell collection
    traccc::cell_collection_types::host cells{&shared_mr};

    cells.push_back({1u, 2u, 1.f, 0, 0});
    cells.push_back({2u, 2u, 1.f, 0, 0});
    cells.push_back({3u, 2u, 1.f, 0, 0});

    cells.push_back({6u, 4u, 1.f, 0, 0});
    cells.push_back({5u, 5u, 1.f, 0, 0});
    cells.push_back({6u, 5u, 1.f, 0, 0});
    cells.push_back({7u, 5u, 1.f, 0, 0});
    cells.push_back({6u, 6u, 1.f, 0, 0});

    // Create module collection
    traccc::cell_module_collection_types::host modules{&shared_mr};
    modules.push_back({});

    // Run Clusterization
    traccc::sycl::clusterization_algorithm ca_sycl(mr, copy, &q, 1024);

    auto measurements_buffer =
        ca_sycl(vecmem::get_data(cells), vecmem::get_data(modules));

    measurement_collection_types::device measurements(measurements_buffer);

    // Check the results
    EXPECT_EQ(copy.get_size(measurements_buffer), 2u);
    std::set<measurement> test;
    test.insert(measurements[0]);
    test.insert(measurements[1]);

    std::set<measurement> ref;
    ref.insert(
        {{2.5f, 2.5f}, {0.75, 0.0833333}, detray::geometry::barcode{0u}});
    ref.insert(
        {{6.5f, 5.5f}, {0.483333, 0.483333}, detray::geometry::barcode{0u}});

    EXPECT_EQ(test, ref);
}
