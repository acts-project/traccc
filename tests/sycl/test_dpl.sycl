/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2023 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// DPL include(s).
#include <oneapi/dpl/algorithm>
#include <oneapi/dpl/execution>

// SYCL include(s).
#include <CL/sycl.hpp>

// VecMem include(s).
#include <vecmem/containers/data/vector_buffer.hpp>
#include <vecmem/containers/device_vector.hpp>
#include <vecmem/memory/host_memory_resource.hpp>
#include <vecmem/memory/sycl/device_memory_resource.hpp>
#include <vecmem/utils/sycl/copy.hpp>

// GTest include(s).
#include <gtest/gtest.h>

namespace {

// Simple asynchronous handler function
auto handle_async_error = [](::sycl::exception_list elist) {
    for (auto& e : elist) {
        try {
            std::rethrow_exception(e);
        } catch (::sycl::exception& e) {
            std::cout << "ASYNC EXCEPTION!!\n";
            std::cout << e.what() << "\n";
        }
    }
};

}  // namespace

TEST(dpl, sort) {

    ::sycl::queue q(handle_async_error);
    vecmem::sycl::copy copy{&q};
    vecmem::host_memory_resource host_resource;
    vecmem::sycl::device_memory_resource device_resource{&q};

    vecmem::vector<unsigned int> host_vector{{3, 2, 1, 8, 4}, &host_resource};

    auto host_buffer = vecmem::get_data(host_vector);
    auto device_buffer = copy.to(vecmem::get_data(host_vector), device_resource,
                                 vecmem::copy::type::host_to_device);

    vecmem::device_vector<unsigned int> device_vector(device_buffer);

    oneapi::dpl::sort(oneapi::dpl::execution::dpcpp_default,
                      device_vector.begin(), device_vector.end());

    copy(device_buffer, host_buffer, vecmem::copy::type::device_to_host);

    ASSERT_EQ(host_vector[0], 1);
    ASSERT_EQ(host_vector[1], 2);
    ASSERT_EQ(host_vector[2], 3);
    ASSERT_EQ(host_vector[3], 4);
    ASSERT_EQ(host_vector[4], 8);
}

TEST(dpl, scan) {

    ::sycl::queue q(handle_async_error);
    vecmem::sycl::copy copy{&q};
    vecmem::host_memory_resource host_resource;
    vecmem::sycl::device_memory_resource device_resource{&q};

    vecmem::vector<unsigned int> host_vector{{3, 2, 1, 8, 4}, &host_resource};

    auto host_buffer = vecmem::get_data(host_vector);
    auto device_buffer = copy.to(vecmem::get_data(host_vector), device_resource,
                                 vecmem::copy::type::host_to_device);

    vecmem::device_vector<unsigned int> device_vector(device_buffer);

    oneapi::dpl::inclusive_scan(oneapi::dpl::execution::dpcpp_default,
                                device_vector.begin(), device_vector.end(),
                                device_vector.begin());

    copy(device_buffer, host_buffer, vecmem::copy::type::device_to_host);

    ASSERT_EQ(host_vector[0], 3);
    ASSERT_EQ(host_vector[1], 5);
    ASSERT_EQ(host_vector[2], 6);
    ASSERT_EQ(host_vector[3], 14);
    ASSERT_EQ(host_vector[4], 18);
}

TEST(dpl, fill) {

    ::sycl::queue q(handle_async_error);
    vecmem::sycl::copy copy{&q};
    vecmem::host_memory_resource host_resource;
    vecmem::sycl::device_memory_resource device_resource{&q};

    vecmem::vector<unsigned int> host_vector{{1, 1, 1, 1, 1, 1, 1},
                                             &host_resource};

    auto host_buffer = vecmem::get_data(host_vector);
    auto device_buffer = copy.to(vecmem::get_data(host_vector), device_resource,
                                 vecmem::copy::type::host_to_device);

    vecmem::device_vector<unsigned int> device_vector(device_buffer);

    oneapi::dpl::fill(oneapi::dpl::execution::dpcpp_default,
                      device_vector.begin(), device_vector.end(), 112);

    copy(device_buffer, host_buffer, vecmem::copy::type::device_to_host);

    ASSERT_EQ(host_vector[0], 112);
    ASSERT_EQ(host_vector[1], 112);
    ASSERT_EQ(host_vector[2], 112);
    ASSERT_EQ(host_vector[3], 112);
    ASSERT_EQ(host_vector[4], 112);
    ASSERT_EQ(host_vector[5], 112);
    ASSERT_EQ(host_vector[6], 112);
}