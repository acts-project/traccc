/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2022 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// Project include(s).
#include "traccc/device/make_prefix_sum_buffer.hpp"
#include "traccc/sycl/utils/make_prefix_sum_buff.hpp"

namespace traccc::sycl {

namespace kernels {
/// Class identifying the kernel running @c traccc::device::fill_prefix_sum
class fill_prefix_sum;
}  // namespace kernels

vecmem::data::vector_buffer<device::prefix_sum_element_t> make_prefix_sum_buff(
    const std::vector<device::prefix_sum_size_t>& sizes, vecmem::copy& copy,
    const traccc::memory_resource& mr, ::sycl::queue& queue) {

    const device::prefix_sum_buffer_t make_sum_result =
        device::make_prefix_sum_buffer(sizes, copy, mr);
    const vecmem::data::vector_view<const device::prefix_sum_size_t>
        sizes_sum_view = make_sum_result.view;
    const unsigned int totalSize = make_sum_result.totalSize;

    if (totalSize == 0) {
        return {0, mr.main};
    }

    // Create buffer and view objects for prefix sum vector
    vecmem::data::vector_buffer<device::prefix_sum_element_t> prefix_sum_buff(
        totalSize, mr.main);
    copy.setup(prefix_sum_buff)->wait();
    vecmem::data::vector_view<device::prefix_sum_element_t> prefix_sum_view =
        prefix_sum_buff;

    // Fill the prefix sum vector
    queue
        .submit([&](::sycl::handler& h) {
            h.parallel_for<kernels::fill_prefix_sum>(
                ::sycl::nd_range<1>(((sizes_sum_view.size() / 32) + 1) * 32,
                                    32),
                [sizes_sum_view, prefix_sum_view](::sycl::id<1> idx) {
                    device::fill_prefix_sum(idx, sizes_sum_view,
                                            prefix_sum_view);
                });
        })
        .wait_and_throw();

    return prefix_sum_buff;
}

}  // namespace traccc::sycl
