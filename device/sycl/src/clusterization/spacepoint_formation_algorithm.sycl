/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2024 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// Local include(s).
#include "../utils/get_queue.hpp"
#include "traccc/sycl/clusterization/spacepoint_formation_algorithm.hpp"
#include "traccc/sycl/utils/calculate1DimNdRange.hpp"

// Project include(s)
#include "traccc/clusterization/device/form_spacepoints.hpp"

namespace traccc::sycl {

namespace kernels {

/// Class identifying the kernel running @c traccc::device::form_spacepoints
class form_spacepoints;

}  // namespace kernels

spacepoint_formation_algorithm::spacepoint_formation_algorithm(
    const traccc::memory_resource& mr, vecmem::copy& copy, queue_wrapper queue)
    : m_mr(mr),
      m_queue(queue),
      m_copy(copy),
      m_max_work_group_size(
          details::get_queue(queue)
              .get_device()
              .get_info<::sycl::info::device::max_work_group_size>()) {}

spacepoint_formation_algorithm::output_type
spacepoint_formation_algorithm::operator()(
    const measurement_collection_types::const_view& measurements_view,
    const cell_module_collection_types::const_view& modules_view) const {

    // Get the number of measurements.
    const measurement_collection_types::const_view::size_type num_measurements =
        m_copy.get().get_size(measurements_view);

    // Create the result buffer.
    spacepoint_collection_types::buffer spacepoints(num_measurements,
                                                    m_mr.main);
    m_copy.get().setup(spacepoints);

    // If there are no measurements, we can conclude here.
    if (num_measurements == 0) {
        return spacepoints;
    }

    // Make an explicit view of the buffer, for the kernel lambda.
    spacepoint_collection_types::view spacepoints_view(spacepoints);

    // For the following kernel, we can now use whatever the desired number of
    // threads per block.
    auto spacepointsRange = traccc::sycl::calculate1DimNdRange(
        num_measurements, m_max_work_group_size);

    // Run form spacepoints kernel, turning 2D measurements into 3D spacepoints
    details::get_queue(m_queue)
        .submit([&](::sycl::handler& h) {
            h.parallel_for<kernels::form_spacepoints>(
                spacepointsRange,
                [measurements_view, modules_view, num_measurements,
                 spacepoints_view](::sycl::nd_item<1> item) {
                    device::form_spacepoints(
                        item.get_global_linear_id(), measurements_view,
                        modules_view, num_measurements, spacepoints_view);
                });
        })
        .wait_and_throw();

    // Return the reconstructed spacepoints.
    return spacepoints;
}

}  // namespace traccc::sycl
