/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2022 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// SYCL library include(s).
#include "../utils/get_queue.hpp"

// SYCL include(s).
#include <CL/sycl.hpp>

// Project include(s).
#include "measurement_creation.hpp"

namespace traccc::sycl {

void measurement_creation(measurement_container_view measurements_view,
                          cluster_container_view clusters_view,
                          const unsigned int &range, queue_wrapper queue) {

    // Run the kernel
    details::get_queue(queue)
        .parallel_for<class MeasurementCreation>(
            range,
            [clusters_view, measurements_view](auto idx) {
                // Initialize device vectors
                device_cluster_container clusters_device(clusters_view);
                device_measurement_container measurement_device(
                    measurements_view);

                // Ignore if idx is out of range
                if (idx >= clusters_device.size())
                    return;

                // items: cluster of cells at current idx
                // header: cluster_id object with the information about the cell
                // module
                const device_cell_collection &cluster =
                    clusters_device.get_items().at(idx);
                const cluster_id &cl_id = clusters_device.get_headers().at(idx);

                const vector2 pitch = get_pitch(cl_id);
                const auto module_idx = cl_id.module_idx;

                scalar totalWeight = 0.;

                // To calculate the mean and variance with high numerical
                // stability we use a weighted variant of Welford's algorithm.
                // This is a single-pass online algorithm that works well for
                // large numbers of samples, as well as samples with very high
                // values.
                //
                // To learn more about this algorithm please refer to:
                // [1] https://doi.org/10.1080/00401706.1962.10490022
                // [2] The Art of Computer Programming, Donald E. Knuth, second
                //     edition, chapter 4.2.2.
                point2 mean = {0., 0.}, var = {0., 0.};

                // Should not happen
                if (cluster.empty()) {
                    return;
                }

                calc_cluster_properties<vecmem::device_vector, cell>(
                    cluster, cl_id, mean, var, totalWeight);

                if (totalWeight > 0.) {
                    measurement m;
                    // normalize the cell position
                    m.local = mean;
                    // normalize the variance
                    m.variance[0] = var[0] / totalWeight;
                    m.variance[1] = var[1] / totalWeight;
                    // plus pitch^2 / 12
                    m.variance = m.variance + point2{pitch[0] * pitch[0] / 12,
                                                     pitch[1] * pitch[1] / 12};
                    // @todo add variance estimation
                    measurement_device.get_items().at(module_idx).push_back(m);
                }
            })
        .wait_and_throw();
}

}  // namespace traccc::sycl