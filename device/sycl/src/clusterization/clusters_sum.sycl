/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2022 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// SYCL library include(s).
#include "../utils/get_queue.hpp"

// SYCL include(s).
#include <CL/sycl.hpp>

// Project include(s).
#include "clusters_sum.hpp"

namespace traccc::sycl {

void clusters_sum(
    const cell_container_types::const_view& cells_view,
    vecmem::data::jagged_vector_view<unsigned int> sparse_ccl_indices_view,
    vecmem::data::vector_view<std::size_t> clusters_per_module_view,
    queue_wrapper queue) {

    // The execution range of the kernel
    auto n_modules = cells_view.headers.size();

    // Calculate the execution NDrange for the kernel
    auto wGroupSize = 64;
    auto num = (n_modules + wGroupSize - 1) / wGroupSize;
    auto ndrange = ::sycl::nd_range<1>{::sycl::range<1>(num * wGroupSize),
                                       ::sycl::range<1>(wGroupSize)};

    details::get_queue(queue)
        .submit([&ndrange, &cells_view, &sparse_ccl_indices_view,
                 &clusters_per_module_view](::sycl::handler& h) {
            h.parallel_for<class ClusterSum>(
                ndrange, [=](::sycl::nd_item<1> item) {
                    // Get the current index
                    auto idx = item.get_global_linear_id();

                    // Initialize the data on the device
                    cell_container_types::const_device cells_device(cells_view);

                    // Ignore if idx is out of range
                    if (idx >= cells_device.size())
                        return;

                    // Get the cells for the current module
                    const auto& cells = cells_device.at(idx).items;

                    // Number of clusters that sparce CCL will find for this
                    // module
                    unsigned int n_clusters = 0;

                    // Vectors used for cluster indices found by sparse CCL
                    vecmem::jagged_device_vector<unsigned int>
                        device_sparse_ccl_indices(sparse_ccl_indices_view);
                    auto cluster_indices = device_sparse_ccl_indices.at(idx);

                    // Run the sparse CCL algorithm
                    unsigned int n_clusters =
                        detail::sparse_ccl(cells, cluster_indices);

                    // Save the number of clusters found in this module at
                    // the last, extra place in the indices vectors
                    cluster_indices.back() = n_clusters;

                    // Fill also the "number of clusters per
                    // module"
                    vecmem::device_vector<std::size_t>
                        device_clusters_per_module(clusters_per_module_view);
                    device_clusters_per_module[idx] = n_clusters;
                });
        })
        .wait_and_throw();
}

}  // namespace traccc::sycl