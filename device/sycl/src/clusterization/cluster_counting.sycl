/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2022 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// SYCL library include(s).
#include "../utils/get_queue.hpp"

// SYCL include(s).
#include <CL/sycl.hpp>

// Project include(s).
#include "cluster_counting.hpp"

namespace traccc::sycl {

void cluster_counting(
    vecmem::data::jagged_vector_view<unsigned int> sparse_ccl_indices_view,
    vecmem::data::vector_view<unsigned int> cluster_sizes_view,
    vecmem::data::vector_view<std::size_t> cluster_prefix_sum_view,
    vecmem::data::vector_view<const device::prefix_sum_element_t>
        cells_prefix_sum_view,
    queue_wrapper queue) {

    // The execution range of the kernel
    auto n_cells = cells_prefix_sum_view.size();

    // Calculate the execution NDrange for the kernel
    auto wGroupSize = 64;
    auto num = (n_cells + wGroupSize - 1) / wGroupSize;
    auto ndrange = ::sycl::nd_range<1>{::sycl::range<1>(num * wGroupSize),
                                       ::sycl::range<1>(wGroupSize)};

    // Set zero kernel
    details::get_queue(queue)
        .submit([&ndrange, &cluster_sizes_view](::sycl::handler& h) {
            h.parallel_for<class SetZeroClusterCounting>(
                ndrange, [=](::sycl::nd_item<1> item) {
                    auto idx = item.get_global_linear_id();

                    vecmem::device_vector<unsigned int> device_cluster_sizes(
                        cluster_sizes_view);

                    if (idx >= device_cluster_sizes.size())
                        return;

                    device_cluster_sizes[idx] = 0;
                });
        })
        .wait_and_throw();

    // Cluster Counting kernel
    details::get_queue(queue)
        .submit([&ndrange, &sparse_ccl_indices_view, &cluster_sizes_view,
                 &cluster_prefix_sum_view,
                 &cells_prefix_sum_view](::sycl::handler& h) {
            h.parallel_for<class ClusterCounting>(
                ndrange, [=](::sycl::nd_item<1> item) {
                    // Get the current idx
                    auto idx = item.get_global_linear_id();

                    // Get the device vector of the cell prefix sum
                    vecmem::device_vector<const device::prefix_sum_element_t>
                        cells_prefix_sum(cells_prefix_sum_view);

                    // Ignore if id_x is out of range
                    if (idx >= cells_prefix_sum.size())
                        return;

                    // Get the indices for the module and the cell in this
                    // module, from the prefix sum
                    auto module_idx = cells_prefix_sum[idx].first;
                    auto cell_idx = cells_prefix_sum[idx].second;

                    // Vectors used for cluster indices found by sparse CCL
                    vecmem::jagged_device_vector<unsigned int>
                        device_sparse_ccl_indices(sparse_ccl_indices_view);
                    const auto& cluster_indices =
                        device_sparse_ccl_indices[module_idx];

                    // Number of clusters that sparce_ccl found for this module
                    const unsigned int n_clusters = cluster_indices.back();

                    // Get the cluster prefix sum at this module_idx to know
                    // where to write current clusters in the
                    // cluster container
                    vecmem::device_vector<std::size_t>
                        device_cluster_prefix_sum(cluster_prefix_sum_view);
                    const std::size_t prefix_sum =
                        device_cluster_prefix_sum[module_idx];

                    // Vector to fill in with the sizes of each cluster
                    vecmem::device_vector<unsigned int> device_cluster_sizes(
                        cluster_sizes_view);

                    // Count the cluster sizes for each position
                    unsigned int cindex = cluster_indices[cell_idx] - 1;
                    if (cindex < n_clusters) {
                        vecmem::device_atomic_ref<unsigned int>(
                            device_cluster_sizes[prefix_sum + cindex])
                            .fetch_add(1);
                    }
                });
        })
        .wait_and_throw();
}

}  // namespace traccc::sycl