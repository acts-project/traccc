/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2022 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// Sycl library include(s).
#include "../utils/get_queue.hpp"
#include "traccc/sycl/clusterization/clusterization_algorithm.hpp"
#include "traccc/sycl/utils/calculate1DimNdRange.hpp"

// Project include(s)
#include "traccc/clusterization/device/connect_components.hpp"
#include "traccc/clusterization/device/count_cluster_cells.hpp"
#include "traccc/clusterization/device/create_measurements.hpp"
#include "traccc/clusterization/device/find_clusters.hpp"
#include "traccc/clusterization/device/form_spacepoints.hpp"
#include "traccc/device/get_prefix_sum.hpp"

// Vecmem include(s).
#include <vecmem/utils/sycl/copy.hpp>

// System include(s).
#include <algorithm>

namespace traccc::sycl {
namespace kernels {

/// Class identifying the kernel running @c traccc::device::find_clusters
class find_clusters;

/// Class identifying the kernel running @c traccc::device::count_cluster_cells
class count_cluster_cells;

/// Class identifying the kernel running @c traccc::device::connect_components
class connect_components;

/// Class identifying the kernel running @c traccc::device::create_measurements
class create_measurements;

/// Class identifying the kernel running @c traccc::device::form_spacepoints
class form_spacepoints;

}  // namespace kernels

clusterization_algorithm::clusterization_algorithm(
    const traccc::memory_resource& mr, queue_wrapper queue)
    : m_mr(mr), m_queue(queue) {

    // Initialize m_copy ptr based on memory resources that were given
    if (mr.host) {
        m_copy = std::make_unique<vecmem::sycl::copy>(queue.queue());
    } else {
        m_copy = std::make_unique<vecmem::copy>();
    }
}

clusterization_algorithm::output_type clusterization_algorithm::operator()(
    const cell_container_types::host& cells_per_event) const {

    // Number of modules
    unsigned int num_modules = cells_per_event.size();
    // Work group size for kernel execution
    std::size_t localSize = 64;

    // Get the view of the cells container
    auto cells_data =
        get_data(cells_per_event, (m_mr.host ? m_mr.host : &(m_mr.main)));

    // Get the sizes of the cells in each module
    auto cell_sizes = m_copy->get_sizes(cells_data.items);

    /*
     * Helper container for sparse CCL calculations.
     * Each inner vector corresponds to 1 module.
     * The indices in a particular inner vector will be filled by sparse ccl
     * and will indicate to which cluster, a particular cell in the module
     * belongs to.
     */
    vecmem::data::jagged_vector_buffer<unsigned int> sparse_ccl_indices_buff(
        std::vector<std::size_t>(cell_sizes.begin(), cell_sizes.end()),
        m_mr.main, m_mr.host);
    m_copy->setup(sparse_ccl_indices_buff);

    /*
     * cl_per_module_prefix_buff is a vector buffer with numbers of found
     * clusters in each module. Later it will be transformed into prefix sum
     * vector (hence the name). The logic is the following. After
     * cluster_finding_kernel, the buffer will contain cluster sizes e.i.
     *
     * cluster sizes: | 1 | 12 | 5 | 102 | 42 | ... - cl_per_module_prefix_buff
     * module index:  | 0 |  1 | 2 |  3  |  4 | ...
     *
     * Now, we copy those cluster sizes to the host and make a duplicate vector
     * of them. So, we are left with cl_per_module_prefix_host, and
     * clusters_per_module_host - which are the same. Now, we procede to
     * modifying the cl_per_module_prefix_host to actually resemble its name
     * i.e.
     *
     * We do std::inclusive_scan on it, which will result in a prefix sum
     * vector:
     *
     * cl_per_module_prefix_host: | 1 | 13 | 18 | 120 | 162 | ...
     *
     * Then, we copy this vector into the previous cl_per_module_prefix_buff.
     * In this way, we don't need to allocate the memory on the device twice.
     *
     * Now, the monotonic prefix sum buffer - cl_per_module_prefix_buff, will
     * allow us to insert the clusters at the correct position inside the
     * kernel. The remaining host vector - clusters_per_module_host, will be
     * needed to allocate memory for other buffers later in the code.
     */
    vecmem::data::vector_buffer<std::size_t> cl_per_module_prefix_buff(
        num_modules, m_mr.main);
    m_copy->setup(cl_per_module_prefix_buff);

    // Create views to pass to cluster finding kernel
    const cell_container_types::const_view cells_view(cells_data);
    vecmem::data::jagged_vector_view<unsigned int> sparse_ccl_indices_view =
        sparse_ccl_indices_buff;
    vecmem::data::vector_view<std::size_t> cl_per_module_prefix_view =
        cl_per_module_prefix_buff;

    // Calculate nd_range to run cluster finding
    auto ndrange = traccc::sycl::calculate1DimNdRange(num_modules, localSize);

    // Run cluster finding kernel
    auto cluster_finding_kernel = details::get_queue(m_queue).submit(
        [&ndrange, &cells_view, &sparse_ccl_indices_view,
         &cl_per_module_prefix_view](::sycl::handler& h) {
            h.parallel_for<kernels::find_clusters>(
                ndrange, [=](::sycl::nd_item<1> item) {
                    device::find_clusters(item.get_global_linear_id(),
                                          cells_view, sparse_ccl_indices_view,
                                          cl_per_module_prefix_view);
                });
        });

    // Get the prefix sum of the cells and copy it to the device buffer
    const device::prefix_sum_t cells_prefix_sum = device::get_prefix_sum(
        cell_sizes, (m_mr.host ? *(m_mr.host) : m_mr.main));
    vecmem::data::vector_buffer<device::prefix_sum_element_t>
        cells_prefix_sum_buff(cells_prefix_sum.size(), m_mr.main);
    m_copy->setup(cells_prefix_sum_buff);
    (*m_copy)(vecmem::get_data(cells_prefix_sum), cells_prefix_sum_buff,
              vecmem::copy::type::copy_type::host_to_device);

    // Wait here for the cluster_finding kernel to finish
    cluster_finding_kernel.wait_and_throw();

    // Copy the sizes of clusters per module to the host
    // and create a copy of "clusters per module" vector
    vecmem::vector<std::size_t> cl_per_module_prefix_host(
        m_mr.host ? m_mr.host : &(m_mr.main));
    (*m_copy)(cl_per_module_prefix_buff, cl_per_module_prefix_host,
              vecmem::copy::type::copy_type::device_to_host);
    std::vector<std::size_t> clusters_per_module_host(
        cl_per_module_prefix_host.begin(), cl_per_module_prefix_host.end());

    // Perform the exclusive scan operation
    std::inclusive_scan(cl_per_module_prefix_host.begin(),
                        cl_per_module_prefix_host.end(),
                        cl_per_module_prefix_host.begin());

    unsigned int total_clusters = cl_per_module_prefix_host.back();

    // Copy the prefix sum back to its device container
    (*m_copy)(vecmem::get_data(cl_per_module_prefix_host),
              cl_per_module_prefix_buff,
              vecmem::copy::type::copy_type::host_to_device);

    // Vector of the exact cluster sizes, will be filled in cluster counting
    vecmem::data::vector_buffer<unsigned int> cluster_sizes_buffer(
        total_clusters, m_mr.main);
    m_copy->setup(cluster_sizes_buffer);
    m_copy->memset(cluster_sizes_buffer, 0);

    // Create views to pass to cluster counting kernel
    vecmem::data::vector_view<const device::prefix_sum_element_t>
        cells_prefix_sum_view = cells_prefix_sum_buff;
    vecmem::data::vector_view<unsigned int> cluster_sizes_view =
        cluster_sizes_buffer;

    // Calculate nd_range to run cluster counting (localSize = 64)
    ndrange = traccc::sycl::calculate1DimNdRange(cells_prefix_sum_view.size(),
                                                 localSize);

    // Run cluster counting kernel
    auto cluster_counting_kernel = details::get_queue(m_queue).submit(
        [&ndrange, &sparse_ccl_indices_view, &cl_per_module_prefix_view,
         &cells_prefix_sum_view, &cluster_sizes_view](::sycl::handler& h) {
            h.parallel_for<kernels::count_cluster_cells>(
                ndrange, [=](::sycl::nd_item<1> item) {
                    device::count_cluster_cells(
                        item.get_global_linear_id(), sparse_ccl_indices_view,
                        cl_per_module_prefix_view, cells_prefix_sum_view,
                        cluster_sizes_view);
                });
        });

    // Wait here for the cluster counting kernel to finish
    cluster_counting_kernel.wait_and_throw();

    // Copy cluster sizes back to the host
    std::vector<unsigned int> cluster_sizes;
    (*m_copy)(cluster_sizes_buffer, cluster_sizes,
              vecmem::copy::type::copy_type::device_to_host);

    // Cluster container buffer for the clusters and headers (cluster ids)
    cluster_container_types::buffer clusters_buffer{
        {total_clusters, m_mr.main},
        {std::vector<std::size_t>(total_clusters, 0),
         std::vector<std::size_t>(cluster_sizes.begin(), cluster_sizes.end()),
         m_mr.main, m_mr.host}};
    m_copy->setup(clusters_buffer.headers);
    m_copy->setup(clusters_buffer.items);

    // Create views to pass to component connection kernel
    cluster_container_types::view clusters_view = clusters_buffer;

    // Run component connection kernel (nd_range same as before)
    auto component_connection_kernel = details::get_queue(m_queue).submit(
        [&ndrange, &cells_view, &sparse_ccl_indices_view,
         &cl_per_module_prefix_view, &cells_prefix_sum_view,
         &clusters_view](::sycl::handler& h) {
            h.parallel_for<kernels::connect_components>(
                ndrange, [=](::sycl::nd_item<1> item) {
                    device::connect_components(
                        item.get_global_linear_id(), cells_view,
                        sparse_ccl_indices_view, cl_per_module_prefix_view,
                        cells_prefix_sum_view, clusters_view);
                });
        });

    // Resizable buffer for the measurements
    measurement_container_types::buffer measurements_buffer{
        {num_modules, m_mr.main},
        {std::vector<std::size_t>(num_modules, 0), clusters_per_module_host,
         m_mr.main, m_mr.host}};
    m_copy->setup(measurements_buffer.headers);
    m_copy->setup(measurements_buffer.items);

    // Spacepoint container buffer to fill inside the spacepoint formation
    // kernel
    spacepoint_container_types::buffer spacepoints_buffer{
        {num_modules, m_mr.main},
        {std::vector<std::size_t>(num_modules, 0), clusters_per_module_host,
         m_mr.main, m_mr.host}};
    m_copy->setup(spacepoints_buffer.headers);
    m_copy->setup(spacepoints_buffer.items);

    // Wait here for the component_connection kernel to finish
    component_connection_kernel.wait_and_throw();

    // Create views to pass to measurement creation kernel
    measurement_container_types::view measurements_view = measurements_buffer;

    // Calculate nd_range to run measurement creation (localSize = 64)
    ndrange = calculate1DimNdRange(clusters_view.headers.size(), localSize);

    // Run measurement_creation kernel
    details::get_queue(m_queue)
        .submit([&ndrange, &cells_view, &clusters_view,
                 &measurements_view](::sycl::handler& h) {
            h.parallel_for<kernels::create_measurements>(
                ndrange, [=](::sycl::nd_item<1> item) {
                    device::create_measurements(item.get_global_linear_id(),
                                                clusters_view, cells_view,
                                                measurements_view);
                });
        })
        .wait_and_throw();

    // Get the prefix sum of the measurements and copy it to the device buffer
    const device::prefix_sum_t meas_prefix_sum =
        device::get_prefix_sum(m_copy->get_sizes(measurements_buffer.items),
                               (m_mr.host ? *(m_mr.host) : m_mr.main));
    vecmem::data::vector_buffer<device::prefix_sum_element_t>
        meas_prefix_sum_buff(meas_prefix_sum.size(), m_mr.main);
    m_copy->setup(meas_prefix_sum_buff);
    (*m_copy)(vecmem::get_data(meas_prefix_sum), meas_prefix_sum_buff,
              vecmem::copy::type::copy_type::host_to_device);

    // Create views to run spacepoint formation
    vecmem::data::vector_view<const device::prefix_sum_element_t>
        meas_prefix_sum_view = meas_prefix_sum_buff;
    spacepoint_container_types::view spacepoints_view = spacepoints_buffer;

    // Run spacepoint formation kernel (ndrange same as before)
    details::get_queue(m_queue)
        .submit([&ndrange, &measurements_view, &meas_prefix_sum_view,
                 &spacepoints_view](::sycl::handler& h) {
            h.parallel_for<kernels::form_spacepoints>(
                ndrange, [=](::sycl::nd_item<1> item) {
                    device::form_spacepoints(
                        item.get_global_linear_id(), measurements_view,
                        meas_prefix_sum_view, spacepoints_view);
                });
        })
        .wait_and_throw();

    return spacepoints_buffer;
}

}  // namespace traccc::sycl