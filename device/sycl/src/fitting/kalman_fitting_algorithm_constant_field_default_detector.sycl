/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2022-2024 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// Local include(s).
#include "../utils/get_queue.hpp"
#include "fit_tracks.hpp"
#include "traccc/sycl/fitting/kalman_fitting_algorithm.hpp"

// Project include(s).
#include "traccc/fitting/kalman_filter/kalman_fitter.hpp"

// Detray include(s).
#include <detray/navigation/navigator.hpp>
#include <detray/propagator/rk_stepper.hpp>

namespace traccc::sycl {
namespace kernels {

/// Identifier for the track fitting kernel.
struct fit_tracks_constant_field_default_detector;

}  // namespace kernels

kalman_fitting_algorithm::output_type kalman_fitting_algorithm::operator()(
    const default_detector::view& det,
    const detray::bfield::const_field_t::view_t& field,
    const track_candidate_container_types::const_view& track_candidates) const {

    // Construct the fitter type.
    using stepper_type =
        detray::rk_stepper<detray::bfield::const_field_t::view_t,
                           default_detector::device::algebra_type,
                           detray::constrained_step<>>;
    using navigator_type = detray::navigator<const default_detector::device>;
    using fitter_type = kalman_fitter<stepper_type, navigator_type>;

    // Run the track fitting.
    return details::fit_tracks<
        fitter_type, kernels::fit_tracks_constant_field_default_detector>(
        det, field, track_candidates, m_config, m_mr, m_copy.get(),
        details::get_queue(m_queue));
}

}  // namespace traccc::sycl
