/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2022-2025 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// Local include(s).
#include "../utils/bfield.hpp"
#include "../utils/get_queue.hpp"
#include "kalman_fitting.hpp"
#include "traccc/sycl/fitting/kalman_fitting_algorithm.hpp"

namespace traccc::sycl {
namespace kernels {
struct fit_tracks_constant_field_telescope_detector;
struct fit_tracks_inhomogeneous_field_telescope_detector;
}  // namespace kernels

kalman_fitting_algorithm::output_type kalman_fitting_algorithm::operator()(
    const telescope_detector::view& det, const bfield& field,
    const edm::track_candidate_container<default_algebra>::const_view&
        track_candidates) const {

    // Run the track fitting.
    if (field.is<const_bfield_backend_t<scalar>>()) {
        return details::kalman_fitting<
            kernels::fit_tracks_constant_field_telescope_detector,
            telescope_detector::device>(
            det, field.as<const_bfield_backend_t<scalar>>(), track_candidates,
            m_config, m_mr, m_copy.get(), details::get_queue(m_queue));
    } else if (field.is<sycl::inhom_bfield_backend_t<scalar>>()) {
        return details::kalman_fitting<
            kernels::fit_tracks_inhomogeneous_field_telescope_detector,
            telescope_detector::device>(
            det, field.as<sycl::inhom_bfield_backend_t<scalar>>(),
            track_candidates, m_config, m_mr, m_copy.get(),
            details::get_queue(m_queue));
    } else {
        throw std::invalid_argument(
            "Unsupported b-field type received in "
            "traccc::sycl::kalman_fitting_algorithm");
    }
}

}  // namespace traccc::sycl
