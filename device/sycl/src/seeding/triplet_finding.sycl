/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2021 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

#include "sycl/seeding/triplet_finding.hpp"

namespace traccc {
namespace sycl {

// Forward decleration of the kernel class
class triplet_find_kernel;

void triplet_finding(const seedfinder_config& config,
                     const seedfilter_config& filter_config,
                     host_internal_spacepoint_container& internal_sp_container,
                     host_doublet_counter_container& doublet_counter_container,
                     host_doublet_container& mid_bot_doublet_container,
                     host_doublet_container& mid_top_doublet_container,
                     host_triplet_counter_container& triplet_counter_container,
                     host_triplet_container& triplet_container,
                     vecmem::memory_resource* resource,
                     ::sycl::queue* q) {                      
    auto internal_sp_view = get_data(internal_sp_container, resource);
    auto doublet_counter_view = get_data(doublet_counter_container, resource);
    auto mid_bot_doublet_view = get_data(mid_bot_doublet_container, resource);
    auto mid_top_doublet_view = get_data(mid_top_doublet_container, resource);
    auto triplet_counter_view = get_data(triplet_counter_container, resource);
    auto triplet_view = get_data(triplet_container, resource);

    // The thread-block is desinged to make each thread find triplets per
    // compatible middle-bot doublet

    // -- localSize
    // The dimension of workGroup (block) is the integer multiple of WARP_SIZE (=32)
    unsigned int localSize = 64;
    // Calculate the global number of threads to run in kernel
    unsigned int num_groups = 0;
    for (unsigned int i = 0; i < internal_sp_view.headers.size(); ++i) {
        num_groups +=
            triplet_counter_container.get_headers()[i] / localSize + 1;
    }
    unsigned int globalSize = localSize * num_groups;

    // 1 dim ND Range for the kernel
    auto tripletFindNdRange = ::sycl::nd_range<1>{{globalSize},{localSize}};
    q->submit([&](::sycl::handler& h){

        // local memory initialization (equivalent to shared memory in CUDA)
        auto localMem = 
            local_accessor<int>(localSize, h);

        TripletFind kernel(config, filter_config, internal_sp_view, doublet_counter_view,
                            mid_bot_doublet_view, mid_top_doublet_view, triplet_counter_view,
                            triplet_view, localMem);

        h.parallel_for<class triplet_find_kernel>(tripletFindNdRange, kernel);
    });
}

} // namespace sycl
} // namespace traccc

