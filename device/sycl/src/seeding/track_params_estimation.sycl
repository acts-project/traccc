/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2021-2022 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// SYCL library include(s).
#include "../utils/get_queue.hpp"
#include "traccc/sycl/seeding/track_params_estimation.hpp"
#include "traccc/sycl/utils/calculate1DimNdRange.hpp"

// Project include(s).
#include "traccc/seeding/device/estimate_track_params.hpp"

// VecMem include(s).
#include <vecmem/utils/sycl/copy.hpp>

namespace traccc::sycl {

namespace kernels {
/// Class identifying the kernel running @c
/// traccc::device::estimate_track_params
class estimate_track_params;
}  // namespace kernels

track_params_estimation::track_params_estimation(
    const traccc::memory_resource& mr, vecmem::copy& copy, queue_wrapper queue)
    : m_mr(mr), m_queue(queue), m_copy(copy) {}

track_params_estimation::output_type track_params_estimation::operator()(
    const spacepoint_collection_types::const_view& spacepoints_view,
    const seed_collection_types::const_view& seeds_view,
    const vector3& bfield) const {

    // Get the size of the seeds view
    auto seeds_size = m_copy.get_size(seeds_view);

    // Create device buffer for the parameters
    bound_track_parameters_collection_types::buffer params_buffer(seeds_size,
                                                                  m_mr.main);
    m_copy.setup(params_buffer)->wait();

    // Check if anything needs to be done.
    if (seeds_size == 0) {
        return params_buffer;
    }

    bound_track_parameters_collection_types::view params_view(params_buffer);

    // -- localSize
    // The dimension of workGroup (block) is the integer multiple of WARP_SIZE
    // (=32)
    unsigned int localSize = 64;

    // 1 dim ND Range for the kernel
    auto trackParamsNdRange =
        traccc::sycl::calculate1DimNdRange(seeds_size, localSize);

    details::get_queue(m_queue)
        .submit([&](::sycl::handler& h) {
            h.parallel_for<kernels::estimate_track_params>(
                trackParamsNdRange, [spacepoints_view, seeds_view, params_view,
                                     bfield](::sycl::nd_item<1> item) {
                    device::estimate_track_params(item.get_global_linear_id(),
                                                  spacepoints_view, seeds_view,
                                                  bfield, params_view);
                });
        })
        .wait_and_throw();

    return params_buffer;
}

}  // namespace traccc::sycl
