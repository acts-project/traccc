/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2021-2022 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

#include "sycl/seeding/weight_updating.hpp"

namespace traccc {
namespace sycl {

class WeightUpdate {
    public:
    WeightUpdate(const seedfilter_config& filter_config,
                 sp_grid_view internal_sp_view,
                 triplet_counter_container_view triplet_counter_view,
                 triplet_container_view triplet_view,
                 local_accessor<scalar> localMem)
        : m_filter_config(filter_config),
          m_internal_sp_view(internal_sp_view),
          m_triplet_counter_view(triplet_counter_view),
          m_triplet_view(triplet_view),
          m_localMem(localMem) {}

    void operator()(::sycl::nd_item<1> item) const {

        // Mapping cuda indexing to dpc++
        auto workGroup = item.get_group();

        // Equivalent to blockIdx.x in cuda
        auto groupIdx = item.get_group(0);
        // Equivalent to blockDim.x in cuda
        auto groupDim = item.get_local_range(0);
        // Equivalent to threadIdx.x in cuda
        auto workItemIdx = item.get_local_id(0);

        // Get device container for input parameters
        sp_grid_device internal_sp_device(m_internal_sp_view);

        device_triplet_counter_container triplet_counter_device(
            {m_triplet_counter_view.headers, m_triplet_counter_view.items});
        device_triplet_container triplet_device(
            {m_triplet_view.headers, m_triplet_view.items});

        // Get the bin and item index
        unsigned int bin_idx(0), tr_idx(0);
        sycl_helper::find_idx_on_container(triplet_device, bin_idx, tr_idx,
                                           item);

        // Header of internal spacepoint container : spacepoint bin information
        // Item of internal spacepoint container : internal spacepoint objects
        // per bin
        auto internal_sp_per_bin = internal_sp_device.bin(bin_idx);

        // Header of triplet counter: number of compatible mid_top doublets per
        // bin Item of triplet counter: triplet counter objects per bin
        auto& num_compat_mb_per_bin =
            triplet_counter_device.get_headers().at(bin_idx).n_mid_bot;
        auto triplet_counter_per_bin =
            triplet_counter_device.get_items().at(bin_idx);

        // Header of triplet: number of triplets per bin
        // Item of triplet: triplet objects per bin
        auto& num_triplets_per_bin =
            triplet_device.get_headers().at(bin_idx).n_triplets;
        auto triplets_per_bin = triplet_device.get_items().at(bin_idx);

        auto compat_seedR = m_localMem.get_pointer();
        ::sycl::group_barrier(workGroup);

        // index of triplet in the item vector
        auto& triplet = triplets_per_bin[tr_idx];
        auto& spB_idx = triplet.sp1;
        auto& spM_idx = triplet.sp2;
        auto& spT_idx = triplet.sp3;

        // prevent overflow
        if (tr_idx >= num_triplets_per_bin)
            return;

        // find the reference index (start and end) of the triplet container
        // item vector
        unsigned int start_idx = 0;
        unsigned int end_idx = 0;

        for (auto triplet_counter : triplet_counter_per_bin) {
            end_idx += triplet_counter.n_triplets;

            if (triplet_counter.mid_bot_doublet.sp1 == spM_idx &&
                triplet_counter.mid_bot_doublet.sp2 == spB_idx) {
                break;
            }

            start_idx += triplet_counter.n_triplets;
        }

        if (end_idx >= triplets_per_bin.size()) {
            end_idx = fmin(triplets_per_bin.size(), end_idx);
        }

        // prevent overflow
        if (start_idx >= triplets_per_bin.size())
            return;

        auto& current_spT =
            internal_sp_device.bin(spT_idx.bin_idx)[spT_idx.sp_idx];

        scalar currentTop_r = current_spT.radius();

        // if two compatible seeds with high distance in r are found, compatible
        // seeds span 5 layers
        // -> very good seed
        scalar lowerLimitCurv =
            triplet.curvature - m_filter_config.deltaInvHelixDiameter;
        scalar upperLimitCurv =
            triplet.curvature + m_filter_config.deltaInvHelixDiameter;
        int num_compat_seedR = 0;

        // iterate over triplets
        for (auto tr_it = triplets_per_bin.begin() + start_idx;
             tr_it != triplets_per_bin.begin() + end_idx; tr_it++) {
            if (triplet == *tr_it) {
                continue;
            }

            auto& other_triplet = *tr_it;
            auto other_spT_idx = (*tr_it).sp3;
            auto other_spT = internal_sp_device.bin(
                other_spT_idx.bin_idx)[other_spT_idx.sp_idx];

            // compared top SP should have at least deltaRMin distance
            scalar otherTop_r = other_spT.radius();
            scalar deltaR = currentTop_r - otherTop_r;
            if (std::abs(deltaR) < m_filter_config.deltaRMin) {
                continue;
            }

            // curvature difference within limits?
            // TODO: how much slower than sorting all vectors by curvature
            // and breaking out of loop? i.e. is vector size large (e.g. in
            // jets?)
            if (other_triplet.curvature < lowerLimitCurv) {
                continue;
            }
            if (other_triplet.curvature > upperLimitCurv) {
                continue;
            }

            bool newCompSeed = true;

            for (unsigned int i_s = 0; i_s < num_compat_seedR; ++i_s) {
                scalar previousDiameter = compat_seedR[i_s];

                // original ATLAS code uses higher min distance for 2nd found
                // compatible seed (20mm instead of 5mm) add new compatible seed
                // only if distance larger than rmin to all other compatible
                // seeds
                if (std::abs(previousDiameter - otherTop_r) <
                    m_filter_config.deltaRMin) {
                    newCompSeed = false;
                    break;
                }
            }

            if (newCompSeed) {
                compat_seedR[num_compat_seedR] = otherTop_r;
                triplet.weight += m_filter_config.compatSeedWeight;
                num_compat_seedR++;
            }

            if (num_compat_seedR >= m_filter_config.compatSeedLimit) {
                break;
            }
        }
    }

    private:
    const seedfilter_config m_filter_config;
    sp_grid_view m_internal_sp_view;
    triplet_counter_container_view m_triplet_counter_view;
    triplet_container_view m_triplet_view;
    local_accessor<scalar> m_localMem;
};

void weight_updating(const seedfilter_config& filter_config,
                     sp_grid& internal_sp,
                     host_triplet_counter_container& triplet_counter_container,
                     host_triplet_container& triplet_container,
                     vecmem::memory_resource& resource, ::sycl::queue* q) {

    auto triplet_counter_view = get_data(triplet_counter_container, &resource);
    auto triplet_view = get_data(triplet_container, &resource);
    auto internal_sp_view = get_data(internal_sp, resource);

    // The thread-block is desinged to make each thread find triplets per
    // compatible middle-bot doublet

    // -- localSize
    // The dimension of workGroup (block) is the integer multiple of WARP_SIZE
    // (=32)
    unsigned int localSize = 64;
    // Calculate the global number of threads to run in kernel
    unsigned int num_groups = 0;
    for (unsigned int i = 0; i < internal_sp.nbins(); ++i) {
        num_groups +=
            triplet_container.get_headers()[i].n_triplets / localSize + 1;
    }
    unsigned int globalSize = localSize * num_groups;
    // 1 dim ND Range for the kernel
    auto weightUpdateNdRange = ::sycl::nd_range<1>{globalSize, localSize};

    q->submit([&](::sycl::handler& h) {
         // local memory initialization (equivalent to shared memory in CUDA)
         auto localMem = local_accessor<scalar>(
             ::sycl::range<1>(filter_config.compatSeedLimit), h);

         WeightUpdate kernel(filter_config, internal_sp_view,
                             triplet_counter_view, triplet_view, localMem);

         h.parallel_for<class weight_update_kernel>(weightUpdateNdRange,
                                                    kernel);
     }).wait_and_throw();
}

}  // namespace sycl
}  // namespace traccc
