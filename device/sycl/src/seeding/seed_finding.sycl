/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2021-2023 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// System include(s).
#include <algorithm>

// SYCL library include(s).
#include "traccc/sycl/seeding/seed_finding.hpp"

// SYCL library include(s).
#include "../utils/get_queue.hpp"
#include "traccc/sycl/utils/calculate1DimNdRange.hpp"
#include "traccc/sycl/utils/make_prefix_sum_buff.hpp"

// Project include(s).
#include "traccc/device/fill_prefix_sum.hpp"
#include "traccc/device/make_prefix_sum_buffer.hpp"
#include "traccc/edm/device/doublet_counter.hpp"
#include "traccc/edm/device/seeding_global_counter.hpp"
#include "traccc/seeding/detail/doublet.hpp"
#include "traccc/seeding/detail/triplet.hpp"
#include "traccc/seeding/device/count_doublets.hpp"
#include "traccc/seeding/device/count_triplets.hpp"
#include "traccc/seeding/device/find_doublets.hpp"
#include "traccc/seeding/device/find_triplets.hpp"
#include "traccc/seeding/device/reduce_triplet_counts.hpp"
#include "traccc/seeding/device/select_seeds.hpp"
#include "traccc/seeding/device/update_triplet_weights.hpp"

namespace traccc::sycl {
namespace kernels {

/// Class identifying the kernel running @c traccc::device::count_doublets
class count_doublets;

/// Class identifying the kernel running @c traccc::device::find_doublets
class find_doublets;

/// Class identifying the kernel running @c traccc::device::count_triplets
class count_triplets;

/// Class identifying the kernel running @c
/// traccc::device::reduce_triplet_counts
class reduce_triplet_counts;

/// Class identifying the kernel running @c traccc::device::find_triplets
class find_triplets;

/// Class identifying the kernel running @c
/// traccc::device::update_triplet_weights
class update_triplet_weights;

/// Class identifying the kernel running @c traccc::device::select_seeds
class select_seeds;

}  // namespace kernels

seed_finding::seed_finding(const seedfinder_config& config,
                           const seedfilter_config& filter_config,
                           const traccc::memory_resource& mr,
                           vecmem::copy& copy, queue_wrapper queue)
    : m_seedfinder_config(config),
      m_seedfilter_config(filter_config),
      m_mr(mr),
      m_queue(queue),
      m_copy(copy) {}

seed_finding::output_type seed_finding::operator()(
    const spacepoint_collection_types::const_view& spacepoints_view,
    const sp_grid_const_view& g2_view) const {

    // Get the sizes from the grid view
    auto grid_sizes = m_copy.get_sizes(g2_view._data_view);

    // Create prefix sum buffer and its view
    vecmem::data::vector_buffer sp_grid_prefix_sum_buff = make_prefix_sum_buff(
        grid_sizes, m_copy, m_mr, details::get_queue(m_queue));
    vecmem::data::vector_view<device::prefix_sum_element_t>
        sp_grid_prefix_sum_view = sp_grid_prefix_sum_buff;

    // Set up the doublet counter buffer.
    device::doublet_counter_collection_types::buffer doublet_counter_buffer = {
        m_copy.get_size(sp_grid_prefix_sum_view), m_mr.main,
        vecmem::data::buffer_type::resizable};
    m_copy.setup(doublet_counter_buffer)->wait();

    // Counter for the total number of doublets and triplets
    vecmem::unique_alloc_ptr<device::seeding_global_counter>
        globalCounter_device =
            vecmem::make_unique_alloc<device::seeding_global_counter>(
                m_mr.main);

    details::get_queue(m_queue)
        .memset(globalCounter_device.get(), 0,
                sizeof(device::seeding_global_counter))
        .wait_and_throw();

    // Calculate the range to run the doublet counting for.
    static constexpr unsigned int doubletCountLocalSize = 32 * 2;
    auto doubletCountRange = traccc::sycl::calculate1DimNdRange(
        m_copy.get_size(sp_grid_prefix_sum_view), doubletCountLocalSize);

    // Count the number of doublets that we need to produce.
    device::doublet_counter_collection_types::view doublet_counter_view =
        doublet_counter_buffer;

    auto aux_globalCounter = globalCounter_device.get();
    details::get_queue(m_queue)
        .submit([&](::sycl::handler& h) {
            h.parallel_for<kernels::count_doublets>(
                doubletCountRange,
                [config = m_seedfinder_config, g2_view, sp_grid_prefix_sum_view,
                 doublet_counter_view,
                 aux_globalCounter](::sycl::nd_item<1> item) {
                    device::count_doublets(item.get_global_linear_id(), config,
                                           g2_view, sp_grid_prefix_sum_view,
                                           doublet_counter_view,
                                           (*aux_globalCounter).m_nMidBot,
                                           (*aux_globalCounter).m_nMidTop);
                });
        })
        .wait_and_throw();

    // Get the summary values.
    vecmem::unique_alloc_ptr<device::seeding_global_counter>
        globalCounter_host =
            vecmem::make_unique_alloc<device::seeding_global_counter>(
                (m_mr.host != nullptr) ? *(m_mr.host) : m_mr.main);
    details::get_queue(m_queue)
        .memcpy(globalCounter_host.get(), globalCounter_device.get(),
                sizeof(device::seeding_global_counter))
        .wait_and_throw();

    // Set up the doublet buffers.
    device::device_doublet_collection_types::buffer doublet_buffer_mb = {
        globalCounter_host->m_nMidBot, m_mr.main};
    m_copy.setup(doublet_buffer_mb)->wait();
    device::device_doublet_collection_types::buffer doublet_buffer_mt = {
        globalCounter_host->m_nMidTop, m_mr.main};
    m_copy.setup(doublet_buffer_mt)->wait();

    // Calculate the range to run the doublet finding for.
    static constexpr unsigned int doubletFindLocalSize = 32 * 2;
    const unsigned int doublet_counter_buffer_size =
        m_copy.get_size(doublet_counter_view);
    auto doubletFindRange = traccc::sycl::calculate1DimNdRange(
        doublet_counter_buffer_size, doubletFindLocalSize);

    // Find all of the spacepoint doublets.
    device::device_doublet_collection_types::view mb_view = doublet_buffer_mb;
    device::device_doublet_collection_types::view mt_view = doublet_buffer_mt;
    auto find_doublets_kernel =
        details::get_queue(m_queue).submit([&](::sycl::handler& h) {
            h.parallel_for<kernels::find_doublets>(
                doubletFindRange,
                [config = m_seedfinder_config, g2_view, doublet_counter_view,
                 mb_view, mt_view](::sycl::nd_item<1> item) {
                    device::find_doublets(item.get_global_linear_id(), config,
                                          g2_view, doublet_counter_view,
                                          mb_view, mt_view);
                });
        });

    // Set up the triplet counter buffers and their views
    device::triplet_counter_spM_collection_types::buffer
        triplet_counter_spM_buffer = {doublet_counter_buffer_size, m_mr.main};
    m_copy.setup(triplet_counter_spM_buffer)->wait();
    m_copy.memset(triplet_counter_spM_buffer, 0)->wait();
    device::triplet_counter_collection_types::buffer
        triplet_counter_midBot_buffer = {globalCounter_host->m_nMidBot,
                                         m_mr.main,
                                         vecmem::data::buffer_type::resizable};
    m_copy.setup(triplet_counter_midBot_buffer)->wait();

    device::triplet_counter_spM_collection_types::view
        triplet_counter_spM_view = triplet_counter_spM_buffer;
    device::triplet_counter_collection_types::view triplet_counter_midBot_view =
        triplet_counter_midBot_buffer;

    // Calculate the range to run the triplet counting for.
    static constexpr unsigned int tripletCountLocalSize = 32 * 2;
    auto tripletCountRange = traccc::sycl::calculate1DimNdRange(
        globalCounter_host->m_nMidBot, tripletCountLocalSize);

    // Wait here for the find_doublets kernel to finish
    find_doublets_kernel.wait_and_throw();

    // Count the number of triplets that we need to produce.
    auto count_triplets_kernel =
        details::get_queue(m_queue).submit([&](::sycl::handler& h) {
            h.parallel_for<kernels::count_triplets>(
                tripletCountRange,
                [config = m_seedfinder_config, g2_view, doublet_counter_view,
                 mb_view, mt_view, triplet_counter_spM_view,
                 triplet_counter_midBot_view](::sycl::nd_item<1> item) {
                    device::count_triplets(
                        item.get_global_linear_id(), config, g2_view,
                        doublet_counter_view, mb_view, mt_view,
                        triplet_counter_spM_view, triplet_counter_midBot_view);
                });
        });

    // Calculate the range to run the triplet count reduction for.
    static constexpr unsigned int reduceTripletCountsLocalSize = 32 * 2;
    auto reduceTripletCountsRange = traccc::sycl::calculate1DimNdRange(
        doublet_counter_buffer_size, reduceTripletCountsLocalSize);

    // Wait here for the count triplets kernel to finish
    count_triplets_kernel.wait_and_throw();

    // Reduce the triplet counts per spM.
    details::get_queue(m_queue)
        .submit([&](::sycl::handler& h) {
            h.parallel_for<kernels::reduce_triplet_counts>(
                reduceTripletCountsRange,
                [doublet_counter_view, triplet_counter_spM_view,
                 aux_globalCounter](::sycl::nd_item<1> item) {
                    device::reduce_triplet_counts(
                        item.get_global_linear_id(), doublet_counter_view,
                        triplet_counter_spM_view,
                        (*aux_globalCounter).m_nTriplets);
                });
        })
        .wait_and_throw();

    details::get_queue(m_queue)
        .memcpy(globalCounter_host.get(), globalCounter_device.get(),
                sizeof(device::seeding_global_counter))
        .wait_and_throw();

    // Set up the triplet buffer and its view
    device::device_triplet_collection_types::buffer triplet_buffer = {
        globalCounter_host->m_nTriplets, m_mr.main};
    m_copy.setup(triplet_buffer)->wait();
    device::device_triplet_collection_types::view triplet_view = triplet_buffer;

    // Calculate the range to run the triplet finding for
    static constexpr unsigned int tripletFindLocalSize = 32 * 2;
    auto tripletFindRange = traccc::sycl::calculate1DimNdRange(
        m_copy.get_size(triplet_counter_midBot_view), tripletFindLocalSize);

    // Find all of the spacepoint triplets.
    auto find_triplets_kernel =
        details::get_queue(m_queue).submit([&](::sycl::handler& h) {
            h.parallel_for<kernels::find_triplets>(
                tripletFindRange,
                [config = m_seedfinder_config,
                 filter_config = m_seedfilter_config, g2_view,
                 doublet_counter_view, mt_view, triplet_counter_spM_view,
                 triplet_counter_midBot_view,
                 triplet_view](::sycl::nd_item<1> item) {
                    device::find_triplets(
                        item.get_global_linear_id(), config, filter_config,
                        g2_view, doublet_counter_view, mt_view,
                        triplet_counter_spM_view, triplet_counter_midBot_view,
                        triplet_view);
                });
        });

    // Calculate the range to run the weight updating for
    static constexpr unsigned int weightUpdatingLocalSize = 32 * 2;
    auto weightUpdatingRange = traccc::sycl::calculate1DimNdRange(
        globalCounter_host->m_nTriplets, weightUpdatingLocalSize);

    // Wait here for the find_triplets kernel to finish
    find_triplets_kernel.wait_and_throw();

    // Check if device is capable of allocating sufficient local memory
    assert(sizeof(scalar) * m_seedfilter_config.compatSeedLimit *
               weightUpdatingLocalSize <
           details::get_queue(m_queue)
               .get_device()
               .get_info<::sycl::info::device::local_mem_size>());

    // Update the weight of all of the spacepoint triplets.
    auto update_weights_kernel =
        details::get_queue(m_queue).submit([&](::sycl::handler& h) {
            // Array for temporary storage of triplet weights for comparing
            // within kernel
            ::sycl::local_accessor<scalar> local_mem(
                m_seedfilter_config.compatSeedLimit * weightUpdatingLocalSize,
                h);

            h.parallel_for<kernels::update_triplet_weights>(
                weightUpdatingRange,
                [filter_config = m_seedfilter_config, g2_view,
                 triplet_counter_spM_view, triplet_counter_midBot_view,
                 local_mem, triplet_view](::sycl::nd_item<1> item) {
                    // Each thread uses compatSeedLimit elements of the array
                    scalar* dataPos = &local_mem[item.get_local_id() *
                                                 filter_config.compatSeedLimit];

                    device::update_triplet_weights(
                        item.get_global_linear_id(), filter_config, g2_view,
                        triplet_counter_spM_view, triplet_counter_midBot_view,
                        dataPos, triplet_view);
                });
        });

    // Create seed buffer object and its view
    seed_collection_types::buffer seed_buffer(
        globalCounter_host->m_nTriplets, m_mr.main,
        vecmem::data::buffer_type::resizable);
    m_copy.setup(seed_buffer)->wait();
    seed_collection_types::view seed_view(seed_buffer);

    // Calculate the range to run the seed selecting for
    static constexpr unsigned int seedSelectingLocalSize = 32 * 2;
    auto seedSelectingRange = traccc::sycl::calculate1DimNdRange(
        doublet_counter_buffer_size, seedSelectingLocalSize);

    // Wait here for the update_weights kernel to finish
    update_weights_kernel.wait_and_throw();

    // Check if device is capable of allocating sufficient local memory
    assert(sizeof(triplet) * m_seedfilter_config.max_triplets_per_spM *
               seedSelectingLocalSize <
           details::get_queue(m_queue)
               .get_device()
               .get_info<::sycl::info::device::local_mem_size>());

    // Create seeds out of selected triplets
    details::get_queue(m_queue)
        .submit([&](::sycl::handler& h) {
            // Array for temporary storage of triplets for comparing within
            // kernel
            ::sycl::local_accessor<triplet> local_mem(
                m_seedfilter_config.max_triplets_per_spM *
                    seedSelectingLocalSize,
                h);

            h.parallel_for<kernels::select_seeds>(
                seedSelectingRange,
                [filter_config = m_seedfilter_config, spacepoints_view, g2_view,
                 triplet_counter_spM_view, triplet_counter_midBot_view,
                 triplet_view, local_mem, seed_view](::sycl::nd_item<1> item) {
                    // Each thread uses compatSeedLimit elements of the array
                    triplet* dataPos =
                        &local_mem[item.get_local_id() *
                                   filter_config.max_triplets_per_spM];

                    device::select_seeds(item.get_global_linear_id(),
                                         filter_config, spacepoints_view,
                                         g2_view, triplet_counter_spM_view,
                                         triplet_counter_midBot_view,
                                         triplet_view, dataPos, seed_view);
                });
        })
        .wait_and_throw();

    return seed_buffer;
}

}  // namespace traccc::sycl
