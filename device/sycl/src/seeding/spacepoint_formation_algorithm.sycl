/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2023-2024 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// Local include(s).
#include "../utils/get_queue.hpp"
#include "traccc/seeding/device/form_spacepoints.hpp"
#include "traccc/sycl/seeding/spacepoint_formation_algorithm.hpp"
#include "traccc/sycl/utils/calculate1DimNdRange.hpp"

// Project include(s).
#include "traccc/geometry/detector.hpp"

// detray include(s).
#include "detray/core/detector.hpp"
#include "detray/detectors/telescope_metadata.hpp"
#include "detray/geometry/shapes/rectangle2D.hpp"

namespace traccc::sycl {

template <typename detector_t>
spacepoint_formation_algorithm<detector_t>::spacepoint_formation_algorithm(
    const traccc::memory_resource& mr, vecmem::copy& copy, queue_wrapper queue)
    : m_mr(mr), m_copy(copy), m_queue(queue) {}

template <typename detector_t>
spacepoint_collection_types::buffer
spacepoint_formation_algorithm<detector_t>::operator()(
    const typename detector_t::view_type& det_view,
    const measurement_collection_types::const_view& measurements_view) const {

    // Get the number of measurements.
    const measurement_collection_types::const_view::size_type num_measurements =
        m_copy.get().get_size(measurements_view);

    // Create the result buffer.
    spacepoint_collection_types::buffer spacepoints_buffer(
        num_measurements, m_mr.main, vecmem::data::buffer_type::resizable);
    m_copy.get().setup(spacepoints_buffer);

    // If there are no measurements, we can conclude here.
    if (num_measurements == 0) {
        return spacepoints_buffer;
    }

    spacepoint_collection_types::view spacepoints_view = spacepoints_buffer;

    // Calculate the range to run the doublet counting for.
    static constexpr unsigned int measLocalSize = 32 * 2;
    auto measCountRange =
        traccc::sycl::calculate1DimNdRange(num_measurements, measLocalSize);

    details::get_queue(m_queue)
        .submit([&](::sycl::handler& h) {
            h.parallel_for(
                measCountRange, [det_view, measurements_view, num_measurements,
                                 spacepoints_view](::sycl::nd_item<1> item) {
                    device::form_spacepoints<detector_t>(
                        item.get_global_linear_id(), det_view,
                        measurements_view, num_measurements, spacepoints_view);
                });
        })
        .wait_and_throw();

    return spacepoints_buffer;
}

// Explicit template instantiation
template class spacepoint_formation_algorithm<default_detector::device>;
template class spacepoint_formation_algorithm<telescope_detector::device>;

}  // namespace traccc::sycl
