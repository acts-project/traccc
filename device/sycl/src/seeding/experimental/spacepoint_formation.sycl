/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2023 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// Local include(s).
#include "../../utils/get_queue.hpp"
#include "traccc/seeding/device/experimental/form_spacepoints.hpp"
#include "traccc/sycl/seeding/experimental/spacepoint_formation.hpp"
#include "traccc/sycl/utils/calculate1DimNdRange.hpp"

// detray include(s).
#include "detray/core/detector.hpp"
#include "detray/detectors/telescope_metadata.hpp"

namespace traccc::sycl::experimental {

namespace kernels {

/// Class identifying the kernel running @c traccc::device::form_spacepoints
class form_spacepoints;

}  // namespace kernels

template <typename detector_t>
spacepoint_formation<detector_t>::spacepoint_formation(
    const traccc::memory_resource& mr, vecmem::copy& copy, queue_wrapper queue)
    : m_mr(mr), m_copy(copy), m_queue(queue) {}

template <typename detector_t>
spacepoint_collection_types::buffer
spacepoint_formation<detector_t>::operator()(
    const typename detector_t::view_type& det_view,
    const measurement_collection_types::const_view& measurements_view) const {

    const std::size_t n_measurements = m_copy.get_size(measurements_view);

    spacepoint_collection_types::buffer spacepoints_buffer(
        n_measurements, m_mr.main, vecmem::data::buffer_type::resizable);
    m_copy.setup(spacepoints_buffer);
    spacepoint_collection_types::view spacepoints_view = spacepoints_buffer;

    // Calculate the range to run the doublet counting for.
    static constexpr unsigned int measLocalSize = 32 * 2;
    auto measCountRange =
        traccc::sycl::calculate1DimNdRange(n_measurements, measLocalSize);

    details::get_queue(m_queue)
        .submit([&](::sycl::handler& h) {
            h.parallel_for<kernels::form_spacepoints>(
                measCountRange, [det_view, measurements_view,
                                 spacepoints_view](::sycl::nd_item<1> item) {
                    device::experimental::form_spacepoints<detector_t>(
                        item.get_global_linear_id(), det_view,
                        measurements_view, spacepoints_view);
                });
        })
        .wait_and_throw();

    return spacepoints_buffer;
}

using telescope_detector_type =
    detray::detector<detray::telescope_metadata<detray::rectangle2D<>>,
                     detray::device_container_types>;
template class spacepoint_formation<telescope_detector_type>;

}  // namespace traccc::sycl::experimental
