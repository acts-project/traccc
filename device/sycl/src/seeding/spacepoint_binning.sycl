/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2021-2022 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// Local include(s).
#include "traccc/sycl/seeding/spacepoint_binning.hpp"

// Local include(s).
#include "../utils/get_queue.hpp"

// Project include(s).
#include "traccc/device/get_prefix_sum.hpp"
#include "traccc/seeding/device/count_grid_capacities.hpp"
#include "traccc/seeding/device/populate_grid.hpp"

// VecMem include(s).
#include <vecmem/utils/sycl/copy.hpp>

// SYCL include(s).
#include <CL/sycl.hpp>

namespace traccc::sycl {
namespace kernels {

/// Class identifying the SYCL kernel that runs @c
/// traccc::device::count_grid_capacities
class count_grid_capacities;

/// Class identifying the SYCL kernel that runs @c traccc::device::populate_grid
class populate_grid;

}  // namespace kernels

spacepoint_binning::spacepoint_binning(
    const seedfinder_config& config, const spacepoint_grid_config& grid_config,
    const traccc::memory_resource& mr, queue_wrapper queue)
    : m_config(config),
      m_axes(get_axes(grid_config, (mr.host ? *(mr.host) : mr.main))),
      m_mr(mr),
      m_queue(queue) {

    // Initialize m_copy ptr based on memory resources that were given
    if (mr.host) {
        m_copy = std::make_unique<vecmem::sycl::copy>(queue.queue());
    } else {
        m_copy = std::make_unique<vecmem::copy>();
    }
}

sp_grid_buffer spacepoint_binning::operator()(
    const spacepoint_container_types::const_view& spacepoints_view) const {

    // Get the spacepoint sizes from the view
    auto sp_sizes = m_copy->get_sizes(spacepoints_view.items);

    return this->operator()(spacepoints_view, sp_sizes);
}

sp_grid_buffer spacepoint_binning::operator()(
    const spacepoint_container_types::buffer& spacepoints_buffer) const {

    // Get the spacepoint sizes from the buffer
    auto sp_sizes = m_copy->get_sizes(spacepoints_buffer.items);

    return this->operator()(spacepoints_buffer, sp_sizes);
}

sp_grid_buffer spacepoint_binning::operator()(
    const spacepoint_container_types::const_view& spacepoints_view,
    const std::vector<unsigned int>& sp_sizes) const {

    // Get the prefix sum for the spacepoints using buffer.
    const device::prefix_sum_t sp_prefix_sum = device::get_prefix_sum(
        sp_sizes, (m_mr.host ? *(m_mr.host) : m_mr.main));

    // Set up the buffer of the prefix sum and its view
    vecmem::data::vector_buffer<device::prefix_sum_element_t>
        sp_prefix_sum_buff(sp_prefix_sum.size(), m_mr.main);
    m_copy->setup(sp_prefix_sum_buff);
    (*m_copy)(vecmem::get_data(sp_prefix_sum), sp_prefix_sum_buff,
              vecmem::copy::type::copy_type::host_to_device);
    vecmem::data::vector_view<device::prefix_sum_element_t> sp_prefix_sum_view =
        sp_prefix_sum_buff;

    // Set up the container that will be filled with the required capacities for
    // the spacepoint grid.
    const std::size_t grid_bins = m_axes.first.n_bins * m_axes.second.n_bins;
    vecmem::data::vector_buffer<unsigned int> grid_capacities_buff(grid_bins,
                                                                   m_mr.main);
    m_copy->setup(grid_capacities_buff);
    m_copy->memset(grid_capacities_buff, 0);
    vecmem::data::vector_view<unsigned int> grid_capacities_view =
        grid_capacities_buff;

    // Calculate the range to run the kernels for.
    static constexpr unsigned int localSize = 32 * 4;
    const unsigned int nGroups = sp_prefix_sum.size() / localSize + 1;
    const unsigned int globalSize = nGroups * localSize;
    ::sycl::nd_range<1> range(globalSize, localSize);

    // Fill the grid capacity container.
    details::get_queue(m_queue)
        .submit([&](::sycl::handler& h) {
            h.parallel_for<kernels::count_grid_capacities>(
                range, [config = m_config, phi_axis = m_axes.first,
                        z_axis = m_axes.second, spacepoints = spacepoints_view,
                        sp_prefix_sum = sp_prefix_sum_view,
                        grid_capacities =
                            grid_capacities_view](::sycl::nd_item<1> item) {
                    device::count_grid_capacities(
                        item.get_global_linear_id(), config, phi_axis, z_axis,
                        spacepoints, sp_prefix_sum, grid_capacities);
                });
        })
        .wait_and_throw();

    // Copy grid capacities back to the host
    vecmem::vector<unsigned int> grid_capacities_host(m_mr.host ? m_mr.host
                                                                : &(m_mr.main));
    (*m_copy)(grid_capacities_buff, grid_capacities_host);

    // Create the grid buffer and its view
    sp_grid_buffer grid_buffer(
        m_axes.first, m_axes.second, std::vector<std::size_t>(grid_bins, 0),
        std::vector<std::size_t>(grid_capacities_host.begin(),
                                 grid_capacities_host.end()),
        m_mr.main, m_mr.host);
    m_copy->setup(grid_buffer._buffer);
    sp_grid_view grid_view = grid_buffer;

    // Populate the grid.
    details::get_queue(m_queue)
        .submit([&](::sycl::handler& h) {
            h.parallel_for<kernels::populate_grid>(
                range, [config = m_config, spacepoints = spacepoints_view,
                        sp_prefix_sum = sp_prefix_sum_view,
                        grid = grid_view](::sycl::nd_item<1> item) {
                    device::populate_grid(item.get_global_linear_id(), config,
                                          spacepoints, sp_prefix_sum, grid);
                });
        })
        .wait_and_throw();

    // Return the freshly filled buffer.
    return grid_buffer;
}

}  // namespace traccc::sycl
