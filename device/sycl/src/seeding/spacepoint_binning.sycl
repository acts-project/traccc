/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2021-2022 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// Local include(s).
#include "traccc/sycl/seeding/spacepoint_binning.hpp"
#include "traccc/sycl/utils/calculate1DimNdRange.hpp"

// Local include(s).
#include "../utils/get_queue.hpp"

// Project include(s).
#include "traccc/seeding/device/count_grid_capacities.hpp"
#include "traccc/seeding/device/populate_grid.hpp"

// SYCL include(s).
#include <CL/sycl.hpp>

namespace traccc::sycl {
namespace kernels {

/// Class identifying the SYCL kernel that runs @c
/// traccc::device::count_grid_capacities
class count_grid_capacities;

/// Class identifying the SYCL kernel that runs @c traccc::device::populate_grid
class populate_grid;

}  // namespace kernels

spacepoint_binning::spacepoint_binning(
    const seedfinder_config& config, const spacepoint_grid_config& grid_config,
    const traccc::memory_resource& mr, vecmem::copy& copy, queue_wrapper queue)
    : m_config(config),
      m_axes(get_axes(grid_config, (mr.host ? *(mr.host) : mr.main))),
      m_mr(mr),
      m_queue(queue),
      m_copy(copy) {}

sp_grid_buffer spacepoint_binning::operator()(
    const spacepoint_collection_types::const_view& spacepoints_view) const {

    // Get the spacepoint sizes from the view
    auto sp_size = m_copy.get_size(spacepoints_view);

    // Set up the container that will be filled with the required capacities for
    // the spacepoint grid.
    const std::size_t grid_bins = m_axes.first.n_bins * m_axes.second.n_bins;
    vecmem::data::vector_buffer<unsigned int> grid_capacities_buff(grid_bins,
                                                                   m_mr.main);
    m_copy.setup(grid_capacities_buff)->wait();
    m_copy.memset(grid_capacities_buff, 0)->wait();
    vecmem::data::vector_view<unsigned int> grid_capacities_view =
        grid_capacities_buff;

    // Calculate the range to run the kernels for.
    static constexpr unsigned int localSize = 32 * 4;
    auto range = traccc::sycl::calculate1DimNdRange(sp_size, localSize);

    // Fill the grid capacity container.
    details::get_queue(m_queue)
        .submit([&](::sycl::handler& h) {
            h.parallel_for<kernels::count_grid_capacities>(
                range, [config = m_config, phi_axis = m_axes.first,
                        z_axis = m_axes.second, spacepoints = spacepoints_view,
                        grid_capacities =
                            grid_capacities_view](::sycl::nd_item<1> item) {
                    device::count_grid_capacities(item.get_global_linear_id(),
                                                  config, phi_axis, z_axis,
                                                  spacepoints, grid_capacities);
                });
        })
        .wait_and_throw();

    // Copy grid capacities back to the host
    vecmem::vector<unsigned int> grid_capacities_host(m_mr.host ? m_mr.host
                                                                : &(m_mr.main));
    m_copy(grid_capacities_buff, grid_capacities_host)->wait();

    // Create the grid buffer and its view
    sp_grid_buffer grid_buffer(
        m_axes.first, m_axes.second,
        std::vector<std::size_t>(grid_capacities_host.begin(),
                                 grid_capacities_host.end()),
        m_mr.main, m_mr.host, vecmem::data::buffer_type::resizable);
    m_copy.setup(grid_buffer._buffer)->wait();
    sp_grid_view grid_view = grid_buffer;

    // Populate the grid.
    details::get_queue(m_queue)
        .submit([&](::sycl::handler& h) {
            h.parallel_for<kernels::populate_grid>(
                range, [config = m_config, spacepoints = spacepoints_view,
                        grid = grid_view](::sycl::nd_item<1> item) {
                    device::populate_grid(item.get_global_linear_id(), config,
                                          spacepoints, grid);
                });
        })
        .wait_and_throw();

    // Return the freshly filled buffer.
    return grid_buffer;
}

}  // namespace traccc::sycl
