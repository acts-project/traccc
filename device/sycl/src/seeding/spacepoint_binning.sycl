/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2021-2022 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// Local include(s).
#include "traccc/sycl/seeding/spacepoint_binning.hpp"

// Local include(s).
#include "../utils/get_queue.hpp"

// Project include(s).
#include "traccc/device/get_prefix_sum.hpp"
#include "traccc/seeding/device/count_grid_capacities.hpp"
#include "traccc/seeding/device/populate_grid.hpp"

// VecMem include(s).
#include <vecmem/utils/copy.hpp>

// SYCL include(s).
#include <CL/sycl.hpp>

namespace traccc::sycl {
namespace kernels {

/// Class identifying the SYCL kernel that runs @c
/// traccc::device::count_grid_capacities
class count_grid_capacities;

/// Class identifying the SYCL kernel that runs @c traccc::device::populate_grid
class populate_grid;

}  // namespace kernels

spacepoint_binning::spacepoint_binning(
    const seedfinder_config& config, const spacepoint_grid_config& grid_config,
    vecmem::memory_resource& mr, const queue_wrapper& queue)
    : m_config(config),
      m_axes(get_axes(grid_config, mr)),
      m_mr(mr),
      m_queue(queue) {}

sp_grid_buffer spacepoint_binning::operator()(
    const host_spacepoint_container& spacepoints) const {

    // Helper object for the data management.
    vecmem::copy copy;

    // Get the data/view for the spacepoints.
    const spacepoint_container_const_data sp_data =
        traccc::get_data(spacepoints);

    // Get the prefix sum for the spacepoints.
    const device::prefix_sum_t sp_prefix_sum =
        device::get_prefix_sum(sp_data.items, m_mr.get(), copy);
    auto sp_prefix_sum_view = vecmem::get_data(sp_prefix_sum);

    // Set up the container that will be filled with the required capacities for
    // the spacepoint grid.
    const std::size_t grid_bins = m_axes.first.n_bins * m_axes.second.n_bins;
    vecmem::vector<unsigned int> grid_capacities(grid_bins, 0, &m_mr.get());

    // Calculate the range to run the kernels for.
    static constexpr unsigned int localSize = 32 * 4;
    const unsigned int nGroups = sp_prefix_sum.size() / localSize + 1;
    const unsigned int globalSize = nGroups * localSize;
    ::sycl::nd_range<1> range(globalSize, localSize);

    // Fill the grid capacity container.
    spacepoint_container_const_data spacepoints_data =
        traccc::get_data(spacepoints);
    spacepoint_container_const_view spacepoints_view = spacepoints_data;
    details::get_queue(m_queue)
        .submit([&](::sycl::handler& h) {
            h.parallel_for<kernels::count_grid_capacities>(
                range, [config = m_config, phi_axis = m_axes.first,
                        z_axis = m_axes.second, spacepoints = spacepoints_view,
                        sp_prefix_sum = sp_prefix_sum_view,
                        grid_capacities = vecmem::get_data(grid_capacities)](
                           ::sycl::nd_item<1> item) {
                    device::count_grid_capacities(
                        item.get_global_linear_id(), config, phi_axis, z_axis,
                        spacepoints, sp_prefix_sum, grid_capacities);
                });
        })
        .wait_and_throw();

    // Create the grid buffer.
    sp_grid_buffer grid_buffer(m_axes.first, m_axes.second,
                               std::vector<std::size_t>(grid_bins, 0),
                               std::vector<std::size_t>(grid_capacities.begin(),
                                                        grid_capacities.end()),
                               m_mr.get());
    copy.setup(grid_buffer._buffer);
    sp_grid_view grid_view = grid_buffer;

    // Populate the grid.
    details::get_queue(m_queue)
        .submit([&](::sycl::handler& h) {
            h.parallel_for<kernels::populate_grid>(
                range, [config = m_config, spacepoints = spacepoints_view,
                        sp_prefix_sum = sp_prefix_sum_view,
                        grid = grid_view](::sycl::nd_item<1> item) {
                    device::populate_grid(item.get_global_linear_id(), config,
                                          spacepoints, sp_prefix_sum, grid);
                });
        })
        .wait_and_throw();

    // Return the freshly filled buffer.
    return grid_buffer;
}

}  // namespace traccc::sycl
