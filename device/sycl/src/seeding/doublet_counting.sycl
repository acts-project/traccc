/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2021-2022 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// SYCL library include(s).
#include "doublet_counting.hpp"

// SYCL library include(s).
#include "../utils/get_queue.hpp"
#include "sycl_helper.hpp"

// Project include(s).
#include "traccc/seeding/doublet_finding_helper.hpp"

// SYCL include(s).
#include <CL/sycl.hpp>

namespace traccc::sycl {

// Kernel class for doublet counting
class DupletCount {
    public:
    DupletCount(const seedfinder_config config, sp_grid_view internal_sp_view,
                doublet_counter_container_view doublet_counter_view)
        : m_config(config),
          m_internal_sp_view(internal_sp_view),
          m_doublet_counter_view(doublet_counter_view) {}

    void operator()(::sycl::nd_item<1> item) const {

        // Get device container for input parameters
        sp_grid_device internal_sp_device(m_internal_sp_view);

        device_doublet_counter_container doublet_counter_device(
            {m_doublet_counter_view.headers, m_doublet_counter_view.items});

        // Get the bin index of spacepoint binning and reference block idx for
        // the bin index
        unsigned int bin_idx(0), sp_idx(0);
        sycl_helper::find_idx_on_jagged_vector(internal_sp_device.data(),
                                               bin_idx, sp_idx, item);

        // get internal spacepoints for current bin
        auto internal_sp_per_bin = internal_sp_device.bin(bin_idx);

        // Header of doublet counter : number of compatible middle sp per bin
        // Item of doublet counter : doublet counter objects per bin
        auto& num_compat_spM_per_bin =
            doublet_counter_device.get_headers().at(bin_idx).n_spM;
        auto& num_mid_bot_per_bin =
            doublet_counter_device.get_headers().at(bin_idx).n_mid_bot;
        auto& num_mid_top_per_bin =
            doublet_counter_device.get_headers().at(bin_idx).n_mid_top;
        auto doublet_counter_per_bin =
            doublet_counter_device.get_items().at(bin_idx);

        // kill the process before overflow
        if (sp_idx >= doublet_counter_per_bin.size()) {
            return;
        }

        // zero initialization for the number of doublets per thread (or middle
        // sp)
        unsigned int n_mid_bot = 0;
        unsigned int n_mid_top = 0;

        // zero initialization for the number of doublets per bin
        doublet_counter_per_bin[sp_idx].n_mid_bot = 0;
        doublet_counter_per_bin[sp_idx].n_mid_top = 0;

        // middle spacepoint index
        auto spM_loc = sp_location({bin_idx, sp_idx});
        // middle spacepoint
        const auto& isp = internal_sp_per_bin[sp_idx];

        // get the neighbor indices
        auto phi_bins = internal_sp_device.axis_p0().range(
            isp.phi(), m_config.neighbor_scope);
        auto z_bins = internal_sp_device.axis_p1().range(
            isp.z(), m_config.neighbor_scope);
        auto i_p = phi_bins[0];
        auto i_z = z_bins[0];

        for (unsigned int c = 0; c < m_config.get_max_neighbor_bins(); c++) {

            auto neighbors = internal_sp_device.bin(i_p, i_z);

            for (auto& neigh_isp : neighbors) {

                // Check if middle and bottom sp can form a doublet
                if (doublet_finding_helper::isCompatible(isp, neigh_isp,
                                                         m_config, true)) {
                    n_mid_bot++;
                }

                // Check if middle and top sp can form a doublet
                if (doublet_finding_helper::isCompatible(isp, neigh_isp,
                                                         m_config, false)) {
                    n_mid_top++;
                }
            }

            i_z++;
            // terminate if we went through all neighbot bins
            if (i_z > z_bins[1] && i_p == phi_bins[1]) {
                break;
            }

            // increse phi_index and reset i_z
            // if i_z is larger than last neighbor index
            if (i_z > z_bins[1]) {
                i_p++;
                i_p = i_p % internal_sp_device.axis_p0().bins();
                i_z = z_bins[0];
            }
        }

        // if number of mid-bot and mid-top doublet for a middle spacepoint is
        // larger than 0, the entry is added to the doublet counter
        if (n_mid_bot > 0 && n_mid_top > 0) {

            vecmem::atomic<uint32_t> obj(&num_compat_spM_per_bin);
            auto pos = obj.fetch_add(1);

            vecmem::atomic<uint32_t> objBot(&num_mid_bot_per_bin);
            objBot.fetch_add(n_mid_bot);

            vecmem::atomic<uint32_t> objTop(&num_mid_top_per_bin);
            objTop.fetch_add(n_mid_top);

            doublet_counter_per_bin[pos] = {spM_loc, n_mid_bot, n_mid_top};
        }
    }

    private:
    const seedfinder_config m_config;
    sp_grid_view m_internal_sp_view;
    doublet_counter_container_view m_doublet_counter_view;
};

void doublet_counting(const seedfinder_config& config, sp_grid& internal_sp,
                      host_doublet_counter_container& doublet_counter_container,
                      vecmem::memory_resource& resource, queue_wrapper queue) {

    auto doublet_counter_container_view =
        get_data(doublet_counter_container, &resource);
    auto internal_sp_view = get_data(internal_sp, resource);

    // The local number of threads per work-group (block in cuda) (number taken
    // from cuda implementation, warp size *2)
    unsigned int localSize = 64;
    // Calculate the global number of threads to run in kernel
    unsigned int num_groups = 0;
    for (size_t i = 0; i < internal_sp.nbins(); ++i) {
        num_groups += internal_sp.bin(i).size() / localSize + 1;
    }
    unsigned int globalSize = num_groups * localSize;
    // 1 dim ND Range for the kernel
    auto doubletCountNdRange = ::sycl::nd_range<1>{globalSize, localSize};

    details::get_queue(queue)
        .submit([&](::sycl::handler& h) {
            DupletCount kernel(config, internal_sp_view,
                               doublet_counter_container_view);
            h.parallel_for<DupletCount>(doubletCountNdRange, kernel);
        })
        .wait_and_throw();
}

}  // namespace traccc::sycl
