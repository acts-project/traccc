/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2021-2022 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

#include "sycl/seeding/doublet_counting.hpp"

namespace traccc {
namespace sycl {

// Kernel class for doublet counting
class DupletCount {
public:
    DupletCount(const seedfinder_config config,
               internal_spacepoint_container_view internal_sp_view, 
                doublet_counter_container_view doublet_counter_view)
    : m_config(config),
      m_internal_sp_view(internal_sp_view),
      m_doublet_counter_view(doublet_counter_view) {} 

    void operator()(::sycl::nd_item<1> item) const {
        
         // Mapping cuda indexing to sycl
        auto workGroup = item.get_group();
        
        // Equivalent to blockIdx.x in cuda
        auto groupIdx = item.get_group(0);
        // Equivalent to blockDim.x in cuda
        auto groupDim = item.get_local_range(0);
        // Equivalent to threadIdx.x in cuda
        auto workItemIdx = item.get_local_id(0);

        // Get device container for input parameters
        device_internal_spacepoint_container internal_sp_device(
            {m_internal_sp_view.headers, m_internal_sp_view.items});
        device_doublet_counter_container doublet_counter_device(
            {m_doublet_counter_view.headers, m_doublet_counter_view.items});
        
        // Get the bin index of spacepoint binning and reference block idx for the
        // bin index
        unsigned int bin_idx = 0;
        unsigned int ref_block_idx = 0;
        sycl_helper::get_header_idx(internal_sp_device.get_items(), bin_idx,
                                    ref_block_idx, item);

        // Header of internal spacepoint container : spacepoint bin information
        // Item of internal spacepoint container : internal spacepoint objects per
        // bin
        const auto& bin_info = internal_sp_device.get_headers().at(bin_idx);
        auto internal_sp_per_bin = internal_sp_device.get_items().at(bin_idx);

        // Header of doublet counter : number of compatible middle sp per bin
        // Item of doublet counter : doublet counter objects per bin
        auto& num_compat_spM_per_bin =
            doublet_counter_device.get_headers().at(bin_idx);
        auto doublet_counter_per_bin =
            doublet_counter_device.get_items().at(bin_idx);

        // index of internal spacepoint in the item vector
        uint32_t sp_idx = (groupIdx - ref_block_idx) * groupDim + workItemIdx;

        if (sp_idx >= doublet_counter_per_bin.size()) return;

        // zero initialization for the number of doublets per thread (or middle sp)
        unsigned int n_mid_bot = 0;
        unsigned int n_mid_top = 0;

        // zero initialization for the number of doublets per bin
        doublet_counter_per_bin[sp_idx].n_mid_bot = 0;
        doublet_counter_per_bin[sp_idx].n_mid_top = 0;

        // middle spacepoint index
        auto spM_loc = sp_location({bin_idx, sp_idx});
        // middle spacepoint
        const auto& isp = internal_sp_per_bin[sp_idx];

        // Loop over (bottom and top) internal spacepoints in the neighbor bins
        for (size_t i_n = 0; i_n < bin_info.bottom_idx.counts; ++i_n) {
            const auto& neigh_bin = bin_info.bottom_idx.vector_indices[i_n];
            const auto& neigh_internal_sp_per_bin =
                internal_sp_device.get_items().at(neigh_bin);

            for (size_t spB_idx = 0; spB_idx < neigh_internal_sp_per_bin.size();
                ++spB_idx) {
                const auto& neigh_isp = neigh_internal_sp_per_bin[spB_idx];

                // Check if middle and bottom sp can form a doublet
                if (doublet_finding_helper::isCompatible(isp, neigh_isp, m_config,
                                                        true)) {
                    n_mid_bot++;
                }

                // Check if middle and top sp can form a doublet
                if (doublet_finding_helper::isCompatible(isp, neigh_isp, m_config,
                                                        false)) {
                    n_mid_top++;
                }
            }
        }
        // if number of mid-bot and mid-top doublet for a middle spacepoint is
        // larger than 0, the entry is added to the doublet counter
        if (n_mid_bot > 0 && n_mid_top > 0) {
            vecmem::atomic<uint32_t> obj(&num_compat_spM_per_bin);
            auto pos = obj.fetch_add(1);
            doublet_counter_per_bin[pos] = {spM_loc, n_mid_bot, n_mid_top};
        }
    }        

private: 
    const seedfinder_config m_config;
    internal_spacepoint_container_view m_internal_sp_view;
    doublet_counter_container_view m_doublet_counter_view;
};

void doublet_counting(const seedfinder_config& config,
                      host_internal_spacepoint_container& internal_sp_container,
                      host_doublet_counter_container& doublet_counter_container,
                      vecmem::memory_resource* resource,
                      ::sycl::queue* q) {

        auto internal_sp_view = get_data(internal_sp_container, resource);
        auto doublet_counter_container_view =
            get_data(doublet_counter_container, resource);

        // The local number of threads per work-group (block in cuda) (number taken from cuda implementation, warp size *2)
        unsigned int localSize = 64;
        // Calculate the global number of threads to run in kernel
        unsigned int num_groups = 0;
        for (size_t i = 0; i < internal_sp_view.headers.size(); ++i) {
            num_groups += internal_sp_view.items.m_ptr[i].size() / localSize + 1;
        }
        unsigned int globalSize = num_groups * localSize;
        // 1 dim ND Range for the kernel
        auto doubletCountNdRange = ::sycl::nd_range<1>{globalSize,localSize};
        
        q->submit([&](::sycl::handler& h){
            DupletCount kernel( config, internal_sp_view, 
                                doublet_counter_container_view );
            h.parallel_for<class doublet_count_kernel>(doubletCountNdRange, kernel);
        }).wait_and_throw();
    }
} // namespace sycl
} // namespace traccc