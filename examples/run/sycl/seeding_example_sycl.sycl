/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2021-2022 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// SYCL include(s)
#include <CL/sycl.hpp>

// algorithms
#include "traccc/seeding/seeding_algorithm.hpp"
#include "traccc/seeding/track_params_estimation.hpp"
#include "traccc/sycl/seeding/seeding_algorithm.hpp"
#include "traccc/sycl/seeding/track_params_estimation.hpp"

// io
#include "traccc/io/read_geometry.hpp"
#include "traccc/io/read_spacepoints.hpp"
#include "traccc/io/utils.hpp"

// performance
#include "traccc/efficiency/seeding_performance_writer.hpp"
#include "traccc/performance/collection_comparator.hpp"
#include "traccc/performance/timer.hpp"

// options
#include "traccc/options/common_options.hpp"
#include "traccc/options/handle_argument_errors.hpp"
#include "traccc/options/seeding_input_options.hpp"

// Detray include(s).
#include "detray/core/detector.hpp"
#include "detray/detectors/toy_metadata.hpp"
#include "detray/io/common/detector_reader.hpp"
#include "detray/propagator/navigator.hpp"
#include "detray/propagator/propagator.hpp"
#include "detray/propagator/rk_stepper.hpp"

// Vecmem include(s)
#include <vecmem/memory/host_memory_resource.hpp>
#include <vecmem/memory/sycl/device_memory_resource.hpp>
#include <vecmem/memory/sycl/host_memory_resource.hpp>
#include <vecmem/utils/sycl/async_copy.hpp>

// System include(s).
#include <exception>
#include <iomanip>
#include <iostream>

namespace po = boost::program_options;

int seq_run(const traccc::seeding_input_config& /*i_cfg*/,
            const traccc::common_options& common_opts, bool run_cpu) {

    // Creating sycl queue object
    ::sycl::queue q;
    std::cout << "Running on device: "
              << q.get_device().get_info<::sycl::info::device::name>() << "\n";

    /// Type declarations
    using host_detector_type = detray::detector<>;

    // Memory resources used by the application.
    vecmem::host_memory_resource host_mr;
    vecmem::sycl::host_memory_resource sycl_host_mr{&q};
    vecmem::sycl::device_memory_resource device_mr{&q};
    traccc::memory_resource mr{device_mr, &sycl_host_mr};

    // Performance writer
    traccc::seeding_performance_writer sd_performance_writer(
        traccc::seeding_performance_writer::config{});

    // Output stats
    uint64_t n_modules = 0;
    uint64_t n_spacepoints = 0;
    uint64_t n_seeds = 0;
    uint64_t n_seeds_sycl = 0;

    /*****************************
     * Build a geometry
     *****************************/

    // Read the detector
    detray::io::detector_reader_config reader_cfg{};
    reader_cfg
        .add_file(traccc::io::data_directory() + common_opts.detector_file)
        .add_file(traccc::io::data_directory() + common_opts.material_file)
        .add_file(traccc::io::data_directory() + common_opts.grid_file);

    auto [host_det, names] =
        detray::io::read_detector<host_detector_type>(host_mr, reader_cfg);

    traccc::geometry surface_transforms =
        traccc::io::alt_read_geometry(host_det);

    // Seeding algorithm
    traccc::seedfinder_config finder_config;
    traccc::spacepoint_grid_config grid_config(finder_config);
    traccc::seedfilter_config filter_config;

    traccc::seeding_algorithm sa(finder_config, grid_config, filter_config,
                                 host_mr);
    traccc::track_params_estimation tp(host_mr);

    vecmem::sycl::async_copy copy{&q};

    traccc::sycl::seeding_algorithm sa_sycl{
        finder_config, grid_config, filter_config, mr, copy, &q};
    traccc::sycl::track_params_estimation tp_sycl{mr, copy, &q};

    traccc::performance::timing_info elapsedTimes;

    // Loop over events
    for (unsigned int event = common_opts.skip;
         event < common_opts.events + common_opts.skip; ++event) {

        // Instantiate host containers/collections
        traccc::io::spacepoint_reader_output reader_output(mr.host);
        traccc::seeding_algorithm::output_type seeds;
        traccc::track_params_estimation::output_type params;

        // Instantiate sycl containers/collections
        traccc::seed_collection_types::buffer seeds_sycl_buffer(0, *(mr.host));
        traccc::bound_track_parameters_collection_types::buffer
            params_sycl_buffer(0, *mr.host);

        {  // Start measuring wall time
            traccc::performance::timer wall_t("Wall time", elapsedTimes);

            /*-----------------
              hit file reading
              -----------------*/

            {
                traccc::performance::timer t("Hit reading  (cpu)",
                                             elapsedTimes);
                // Read the hits from the relevant event file
                traccc::io::read_spacepoints(
                    reader_output, event, common_opts.input_directory,
                    surface_transforms, common_opts.input_data_format);

            }  // stop measuring hit reading timer

            const traccc::spacepoint_collection_types::host&
                spacepoints_per_event = reader_output.spacepoints;
            const traccc::cell_module_collection_types::host&
                modules_per_event = reader_output.modules;

            /*----------------------------
                 Seeding algorithm
              ----------------------------*/

            /// SYCL

            // Copy the spacepoint and module data to the device.
            traccc::spacepoint_collection_types::buffer spacepoints_sycl_buffer(
                spacepoints_per_event.size(), mr.main);
            copy(vecmem::get_data(spacepoints_per_event),
                 spacepoints_sycl_buffer);
            traccc::cell_module_collection_types::buffer modules_buffer(
                modules_per_event.size(), mr.main);
            copy(vecmem::get_data(modules_per_event), modules_buffer);

            {
                traccc::performance::timer t("Seeding (sycl)", elapsedTimes);
                // Reconstruct the spacepoints into seeds.
                seeds_sycl_buffer = sa_sycl(spacepoints_sycl_buffer);
            }  // stop measuring seeding sycl timer

            // CPU

            if (run_cpu) {
                traccc::performance::timer t("Seeding  (cpu)", elapsedTimes);
                seeds = sa(spacepoints_per_event);
            }  // stop measuring seeding cpu timer

            /*----------------------------
              Track params estimation
              ----------------------------*/

            // SYCL

            {
                traccc::performance::timer t("Track params (sycl)",
                                             elapsedTimes);
                params_sycl_buffer =
                    tp_sycl(spacepoints_sycl_buffer, seeds_sycl_buffer,
                            {0.f, 0.f, finder_config.bFieldInZ});
            }  // stop measuring track params sycl timer

            // CPU
            if (run_cpu) {
                traccc::performance::timer t("Track params  (cpu)",
                                             elapsedTimes);
                params = tp(spacepoints_per_event, seeds,
                            {0.f, 0.f, finder_config.bFieldInZ});
            }  // stop measuring track params cpu timer

        }  // Stop measuring wall time

        /*----------------------------------
          compare seeds from cpu and sycl
          ----------------------------------*/

        // Copy the seeds to the host for comparison.
        traccc::seed_collection_types::host seeds_sycl;
        traccc::bound_track_parameters_collection_types::host params_sycl;
        copy(seeds_sycl_buffer, seeds_sycl)->wait();
        copy(params_sycl_buffer, params_sycl)->wait();

        if (run_cpu) {
            // Show which event we are currently presenting the results for.
            std::cout << "===>>> Event " << event << " <<<===" << std::endl;

            // Compare the seeds made on the host and on the device
            traccc::collection_comparator<traccc::seed> compare_seeds{
                "seeds", traccc::details::comparator_factory<traccc::seed>{
                             vecmem::get_data(reader_output.spacepoints),
                             vecmem::get_data(reader_output.spacepoints)}};
            compare_seeds(vecmem::get_data(seeds),
                          vecmem::get_data(seeds_sycl));

            // Compare the track parameters made on the host and on the device.
            traccc::collection_comparator<traccc::bound_track_parameters>
                compare_track_parameters{"track parameters"};
            compare_track_parameters(vecmem::get_data(params),
                                     vecmem::get_data(params_sycl));
        }

        /*----------------
             Statistics
          ---------------*/

        n_spacepoints += reader_output.spacepoints.size();
        n_modules += reader_output.modules.size();
        n_seeds_sycl += seeds_sycl.size();
        n_seeds += seeds.size();

        /*------------
          Writer
          ------------*/

        if (common_opts.check_performance) {
            traccc::event_map2 evt_map(event, common_opts.input_directory,
                                       common_opts.input_directory,
                                       common_opts.input_directory);
            sd_performance_writer.write(
                vecmem::get_data(seeds_sycl),
                vecmem::get_data(reader_output.spacepoints), evt_map);
        }
    }

    if (common_opts.check_performance) {
        sd_performance_writer.finalize();
    }

    std::cout << "==> Statistics ... " << std::endl;
    std::cout << "- read    " << n_spacepoints << " spacepoints from "
              << n_modules << " modules" << std::endl;
    std::cout << "- created  (cpu)  " << n_seeds << " seeds" << std::endl;
    std::cout << "- created (sycl) " << n_seeds_sycl << " seeds" << std::endl;
    std::cout << "==>Elapsed times...\n" << elapsedTimes << std::endl;

    return 0;
}

// The main routine
//
int main(int argc, char* argv[]) {
    // Set up the program options
    po::options_description desc("Allowed options");

    // Add options
    desc.add_options()("help,h", "Give some help with the program's options");
    traccc::common_options common_opts(desc);
    traccc::seeding_input_config seeding_input_cfg(desc);
    desc.add_options()("run_cpu", po::value<bool>()->default_value(false),
                       "run cpu tracking as well");

    po::variables_map vm;
    po::store(po::parse_command_line(argc, argv, desc), vm);

    // Check errors
    traccc::handle_argument_errors(vm, desc);

    // Read options
    common_opts.read(vm);
    seeding_input_cfg.read(vm);
    auto run_cpu = vm["run_cpu"].as<bool>();

    std::cout << "Running " << argv[0] << " " << common_opts.detector_file
              << " " << common_opts.input_directory << " " << common_opts.events
              << std::endl;

    return seq_run(seeding_input_cfg, common_opts, run_cpu);
}
