/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2021-2024 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// SYCL include(s)
#include <sycl/sycl.hpp>

// algorithms
#include "traccc/seeding/seeding_algorithm.hpp"
#include "traccc/seeding/track_params_estimation.hpp"
#include "traccc/sycl/seeding/seeding_algorithm.hpp"
#include "traccc/sycl/seeding/track_params_estimation.hpp"

// io
#include "traccc/io/read_detector.hpp"
#include "traccc/io/read_spacepoints.hpp"
#include "traccc/io/utils.hpp"

// performance
#include "traccc/efficiency/seeding_performance_writer.hpp"
#include "traccc/performance/collection_comparator.hpp"
#include "traccc/performance/timer.hpp"

// options
#include "traccc/options/accelerator.hpp"
#include "traccc/options/detector.hpp"
#include "traccc/options/input_data.hpp"
#include "traccc/options/performance.hpp"
#include "traccc/options/program_options.hpp"
#include "traccc/options/track_seeding.hpp"

// Detray include(s).
#include "detray/core/detector.hpp"
#include "detray/core/detector_metadata.hpp"
#include "detray/io/frontend/detector_reader.hpp"
#include "detray/navigation/navigator.hpp"
#include "detray/propagator/propagator.hpp"
#include "detray/propagator/rk_stepper.hpp"

// Vecmem include(s)
#include <vecmem/memory/host_memory_resource.hpp>
#include <vecmem/memory/sycl/device_memory_resource.hpp>
#include <vecmem/memory/sycl/host_memory_resource.hpp>
#include <vecmem/memory/sycl/shared_memory_resource.hpp>
#include <vecmem/utils/sycl/async_copy.hpp>

// System include(s).
#include <exception>
#include <iomanip>
#include <iostream>

int seq_run(const traccc::opts::detector& detector_opts,
            const traccc::opts::track_seeding& seeding_opts,
            const traccc::opts::input_data& input_opts,
            const traccc::opts::performance& performance_opts,
            const traccc::opts::accelerator& accelerator_opts) {

    // Creating sycl queue object
    ::sycl::queue q;
    std::cout << "Running on device: "
              << q.get_device().get_info<::sycl::info::device::name>() << "\n";

    // Memory resources used by the application.
    vecmem::host_memory_resource host_mr;
    vecmem::sycl::host_memory_resource sycl_host_mr{&q};
    vecmem::sycl::shared_memory_resource shared_mr{&q};
    vecmem::sycl::device_memory_resource device_mr{&q};
    traccc::memory_resource mr{device_mr, &sycl_host_mr};

    // Copy object for asynchronous data transfers.
    vecmem::sycl::async_copy copy{&q};

    // Performance writer
    traccc::seeding_performance_writer sd_performance_writer(
        traccc::seeding_performance_writer::config{});

    // Output stats
    uint64_t n_spacepoints = 0;
    uint64_t n_seeds = 0;
    uint64_t n_seeds_sycl = 0;

    /*****************************
     * Build a geometry
     *****************************/

    // Construct a Detray detector object, if supported by the configuration.
    traccc::default_detector::host host_det{host_mr};
    traccc::default_detector::buffer device_det;
    traccc::default_detector::view device_det_view;
    if (detector_opts.use_detray_detector) {
        traccc::io::read_detector(
            host_det, host_mr, detector_opts.detector_file,
            detector_opts.material_file, detector_opts.grid_file);
        device_det =
            detray::get_buffer(detray::get_data(host_det), device_mr, copy);
        q.wait_and_throw();
        device_det_view = detray::get_data(device_det);
    }

    // Seeding algorithm
    traccc::seeding_algorithm sa(seeding_opts.seedfinder,
                                 {seeding_opts.seedfinder},
                                 seeding_opts.seedfilter, host_mr);
    traccc::track_params_estimation tp(host_mr);

    traccc::sycl::seeding_algorithm sa_sycl{seeding_opts.seedfinder,
                                            {seeding_opts.seedfinder},
                                            seeding_opts.seedfilter,
                                            mr,
                                            copy,
                                            &q};
    traccc::sycl::track_params_estimation tp_sycl{mr, copy, &q};

    traccc::performance::timing_info elapsedTimes;

    // Loop over events
    for (std::size_t event = input_opts.skip;
         event < input_opts.events + input_opts.skip; ++event) {

        // Instantiate host containers/collections
        traccc::spacepoint_collection_types::host spacepoints_per_event{
            &host_mr};
        traccc::seeding_algorithm::output_type seeds;
        traccc::track_params_estimation::output_type params;

        // Instantiate sycl containers/collections
        traccc::seed_collection_types::buffer seeds_sycl_buffer(0, *(mr.host));
        traccc::bound_track_parameters_collection_types::buffer
            params_sycl_buffer(0, *mr.host);

        {  // Start measuring wall time
            traccc::performance::timer wall_t("Wall time", elapsedTimes);

            /*-----------------
              hit file reading
              -----------------*/

            {
                traccc::performance::timer t("Hit reading  (cpu)",
                                             elapsedTimes);
                // Read the hits from the relevant event file
                traccc::io::read_spacepoints(
                    spacepoints_per_event, event, input_opts.directory,
                    (input_opts.use_acts_geom_source ? &host_det : nullptr),
                    input_opts.format);

            }  // stop measuring hit reading timer

            /*----------------------------
                 Seeding algorithm
              ----------------------------*/

            /// SYCL

            // Copy the spacepoint and module data to the device.
            traccc::spacepoint_collection_types::buffer spacepoints_sycl_buffer(
                static_cast<unsigned int>(spacepoints_per_event.size()),
                mr.main);
            copy(vecmem::get_data(spacepoints_per_event),
                 spacepoints_sycl_buffer)
                ->wait();

            {
                traccc::performance::timer t("Seeding (sycl)", elapsedTimes);
                // Reconstruct the spacepoints into seeds.
                seeds_sycl_buffer = sa_sycl(spacepoints_sycl_buffer);
            }  // stop measuring seeding sycl timer

            // CPU

            if (accelerator_opts.compare_with_cpu) {
                traccc::performance::timer t("Seeding  (cpu)", elapsedTimes);
                seeds = sa(spacepoints_per_event);
            }  // stop measuring seeding cpu timer

            /*----------------------------
              Track params estimation
              ----------------------------*/

            // SYCL

            {
                traccc::performance::timer t("Track params (sycl)",
                                             elapsedTimes);
                params_sycl_buffer =
                    tp_sycl(spacepoints_sycl_buffer, seeds_sycl_buffer,
                            {0.f, 0.f, seeding_opts.seedfinder.bFieldInZ});
            }  // stop measuring track params sycl timer

            // CPU
            if (accelerator_opts.compare_with_cpu) {
                traccc::performance::timer t("Track params  (cpu)",
                                             elapsedTimes);
                params = tp(spacepoints_per_event, seeds,
                            {0.f, 0.f, seeding_opts.seedfinder.bFieldInZ});
            }  // stop measuring track params cpu timer

        }  // Stop measuring wall time

        /*----------------------------------
          compare seeds from cpu and sycl
          ----------------------------------*/

        // Copy the seeds to the host for comparison.
        traccc::seed_collection_types::host seeds_sycl;
        traccc::bound_track_parameters_collection_types::host params_sycl;
        copy(seeds_sycl_buffer, seeds_sycl)->wait();
        copy(params_sycl_buffer, params_sycl)->wait();

        if (accelerator_opts.compare_with_cpu) {
            // Show which event we are currently presenting the results for.
            std::cout << "===>>> Event " << event << " <<<===" << std::endl;

            // Compare the seeds made on the host and on the device
            traccc::collection_comparator<traccc::seed> compare_seeds{
                "seeds", traccc::details::comparator_factory<traccc::seed>{
                             vecmem::get_data(spacepoints_per_event),
                             vecmem::get_data(spacepoints_per_event)}};
            compare_seeds(vecmem::get_data(seeds),
                          vecmem::get_data(seeds_sycl));

            // Compare the track parameters made on the host and on the device.
            traccc::collection_comparator<traccc::bound_track_parameters>
                compare_track_parameters{"track parameters"};
            compare_track_parameters(vecmem::get_data(params),
                                     vecmem::get_data(params_sycl));
        }

        /*----------------
             Statistics
          ---------------*/

        n_spacepoints += spacepoints_per_event.size();
        n_seeds_sycl += seeds_sycl.size();
        n_seeds += seeds.size();

        /*------------
          Writer
          ------------*/

        if (performance_opts.run) {

            traccc::event_data evt_data(input_opts.directory, event, host_mr,
                                        input_opts.use_acts_geom_source,
                                        &host_det, input_opts.format, false);

            sd_performance_writer.write(vecmem::get_data(seeds_sycl),
                                        vecmem::get_data(spacepoints_per_event),
                                        evt_data);
        }
    }

    if (performance_opts.run) {
        sd_performance_writer.finalize();
    }

    std::cout << "==> Statistics ... " << std::endl;
    std::cout << "- read    " << n_spacepoints << " spacepoints" << std::endl;
    std::cout << "- created  (cpu)  " << n_seeds << " seeds" << std::endl;
    std::cout << "- created (sycl) " << n_seeds_sycl << " seeds" << std::endl;
    std::cout << "==>Elapsed times...\n" << elapsedTimes << std::endl;

    return 0;
}

// The main routine
//
int main(int argc, char* argv[]) {

    // Program options.
    traccc::opts::detector detector_opts;
    traccc::opts::input_data input_opts;
    traccc::opts::track_seeding seeding_opts;
    traccc::opts::performance performance_opts;
    traccc::opts::accelerator accelerator_opts;
    traccc::opts::program_options program_opts{
        "Full Tracking Chain Using SYCL (without clusterization)",
        {detector_opts, input_opts, seeding_opts, performance_opts,
         accelerator_opts},
        argc,
        argv};

    // Run the application.
    return seq_run(detector_opts, seeding_opts, input_opts, performance_opts,
                   accelerator_opts);
}
