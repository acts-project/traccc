/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2022-2024 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// Local include(s).
#include "full_chain_algorithm.hpp"

// SYCL include(s).
#include <sycl/sycl.hpp>

// System include(s).
#include <exception>
#include <iostream>

namespace {

/// Simple asynchronous handler function
auto handle_async_error = [](::sycl::exception_list elist) {
    for (auto& e : elist) {
        try {
            std::rethrow_exception(e);
        } catch (::sycl::exception& e) {
            std::cout << "ASYNC EXCEPTION!!\n";
            std::cout << e.what() << "\n";
        }
    }
};

}  // namespace

namespace traccc::sycl {
namespace details {

struct full_chain_algorithm_data {

    /// Constructor
    explicit full_chain_algorithm_data(const ::sycl::async_handler& handler)
        : m_queue{handler} {}

    /// The native SYCL queue object
    ::sycl::queue m_queue;
    /// Wrapper around the SYCL queue object
    queue_wrapper m_queue_wrapper{&m_queue};
};

}  // namespace details

full_chain_algorithm::full_chain_algorithm(
    vecmem::memory_resource& host_mr,
    const clustering_config& clustering_config,
    const seedfinder_config& finder_config,
    const spacepoint_grid_config& grid_config,
    const seedfilter_config& filter_config,
    const finding_algorithm::config_type& finding_config,
    const fitting_algorithm::config_type&,
    const silicon_detector_description::host& det_descr,
    host_detector_type* detector)
    : m_data(std::make_unique<details::full_chain_algorithm_data>(
          ::handle_async_error)),
      m_host_mr(host_mr),
      m_device_mr{&(m_data->m_queue)},
      m_cached_device_mr{m_device_mr},
      m_copy{&(m_data->m_queue)},
      m_field_vec{0.f, 0.f, finder_config.bFieldInZ},
      m_field{
          detray::bfield::create_const_field<host_detector_type::scalar_type>(
              m_field_vec)},
      m_det_descr(det_descr),
      m_device_det_descr{
          static_cast<silicon_detector_description::buffer::size_type>(
              m_det_descr.get().size()),
          m_device_mr},
      m_detector(detector),
      m_device_detector{},
      m_clusterization{memory_resource{m_cached_device_mr, &(m_host_mr.get())},
                       m_copy, m_data->m_queue_wrapper, clustering_config},
      m_measurement_sorting(m_copy, m_data->m_queue_wrapper),
      m_spacepoint_formation{
          memory_resource{m_cached_device_mr, &(m_host_mr.get())}, m_copy,
          m_data->m_queue_wrapper},
      m_seeding{finder_config,
                grid_config,
                filter_config,
                memory_resource{m_cached_device_mr, &(m_host_mr.get())},
                m_copy,
                m_data->m_queue_wrapper},
      m_track_parameter_estimation{
          memory_resource{m_cached_device_mr, &(m_host_mr.get())}, m_copy,
          m_data->m_queue_wrapper},
      m_finding{finding_config,
                memory_resource{m_cached_device_mr, &(m_host_mr.get())}, m_copy,
                m_data->m_queue_wrapper},
      m_clustering_config(clustering_config),
      m_finder_config(finder_config),
      m_grid_config(grid_config),
      m_filter_config(filter_config),
      m_finding_config(finding_config) {

    // Tell the user what device is being used.
    std::cout
        << "Using SYCL device: "
        << m_data->m_queue.get_device().get_info<::sycl::info::device::name>()
        << std::endl;

    // Copy the detector (description) to the device.
    m_copy(vecmem::get_data(m_det_descr.get()), m_device_det_descr)->wait();
    if (m_detector != nullptr) {
        m_device_detector =
            detray::get_buffer(*m_detector, m_device_mr, m_copy);
        m_device_detector_view = detray::get_data(m_device_detector);
    }
}

full_chain_algorithm::full_chain_algorithm(const full_chain_algorithm& parent)
    : m_data(std::make_unique<details::full_chain_algorithm_data>(
          ::handle_async_error)),
      m_host_mr(parent.m_host_mr),
      m_device_mr{&(m_data->m_queue)},
      m_cached_device_mr{m_device_mr},
      m_copy{&(m_data->m_queue)},
      m_field_vec{parent.m_field_vec},
      m_field{parent.m_field},
      m_det_descr(parent.m_det_descr),
      m_device_det_descr{
          static_cast<silicon_detector_description::buffer::size_type>(
              m_det_descr.get().size()),
          m_device_mr},
      m_detector(parent.m_detector),
      m_device_detector{},
      m_clusterization{memory_resource{m_cached_device_mr, &(m_host_mr.get())},
                       m_copy, m_data->m_queue_wrapper,
                       parent.m_clustering_config},
      m_measurement_sorting(m_copy, m_data->m_queue_wrapper),
      m_spacepoint_formation{
          memory_resource{m_cached_device_mr, &(m_host_mr.get())}, m_copy,
          m_data->m_queue_wrapper},
      m_seeding{parent.m_finder_config,
                parent.m_grid_config,
                parent.m_filter_config,
                memory_resource{m_cached_device_mr, &(m_host_mr.get())},
                m_copy,
                m_data->m_queue_wrapper},
      m_track_parameter_estimation{
          memory_resource{m_cached_device_mr, &(m_host_mr.get())}, m_copy,
          m_data->m_queue_wrapper},
      m_finding{parent.m_finding_config,
                memory_resource{m_cached_device_mr, &(m_host_mr.get())}, m_copy,
                m_data->m_queue_wrapper},
      m_clustering_config(parent.m_clustering_config),
      m_finder_config(parent.m_finder_config),
      m_grid_config(parent.m_grid_config),
      m_filter_config(parent.m_filter_config),
      m_finding_config(parent.m_finding_config) {

    // Copy the detector (description) to the device.
    m_copy(vecmem::get_data(m_det_descr.get()), m_device_det_descr)->wait();
    if (m_detector != nullptr) {
        m_device_detector =
            detray::get_buffer(*m_detector, m_device_mr, m_copy);
        m_device_detector_view = detray::get_data(m_device_detector);
    }
}

full_chain_algorithm::~full_chain_algorithm() = default;

full_chain_algorithm::output_type full_chain_algorithm::operator()(
    const edm::silicon_cell_collection::host& cells) const {

    // Create device copy of input collections
    edm::silicon_cell_collection::buffer cells_buffer{
        static_cast<unsigned int>(cells.size()), m_cached_device_mr};
    m_copy(vecmem::get_data(cells), cells_buffer)->wait();

    // Execute the algorithms.
    const clusterization_algorithm::output_type measurements =
        m_clusterization(cells_buffer, m_device_det_descr);
    m_measurement_sorting(measurements);

    // If we have a Detray detector, run the seeding, track
    // finding and fitting.
    if (m_detector != nullptr) {

        // Run the seed-finding.
        const spacepoint_formation_algorithm::output_type spacepoints =
            m_spacepoint_formation(m_device_detector_view, measurements);
        const track_params_estimation::output_type track_params =
            m_track_parameter_estimation(spacepoints, m_seeding(spacepoints),
                                         {0.f, 0.f, m_finder_config.bFieldInZ});

        // Run the track finding.
        const finding_algorithm::output_type track_candidates = m_finding(
            m_device_detector_view, m_field, measurements, track_params);

        // Get the final data back to the host.
        bound_track_parameters_collection_types::host result(
            &(m_host_mr.get()));
        m_copy(track_candidates.headers, result)->wait();

        // Return the host container.
        return result;
    }
    // If not, copy the measurements back to the host, and return
    // a dummy object.
    else {

        // Copy the measurements back to the host.
        measurement_collection_types::host measurements_host(
            &(m_host_mr.get()));
        m_copy(measurements, measurements_host)->wait();

        // Return an empty object.
        return {};
    }
}

}  // namespace traccc::sycl
