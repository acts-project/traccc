# TRACCC library, part of the ACTS project (R&D line)
#
# (c) 2021-2024 CERN for the benefit of the ACTS project
#
# Mozilla Public License Version 2.0

name: Builds

on:
  push:
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  containers:
    name: ${{ matrix.platform.name }}-${{ matrix.build }}
    runs-on: ubuntu-latest
    container: ${{ matrix.platform.container }}
    strategy:
      matrix:
        platform:
          - name: CPU
            container: ghcr.io/acts-project/ubuntu2404:56
            options: --preset host-fp32 -DALGEBRA_PLUGINS_USE_SYSTEM_VC=FALSE
            run_tests: true
          - name: CPU
            container: ghcr.io/acts-project/ubuntu2404:56
            options: --preset host-fp64 -DALGEBRA_PLUGINS_USE_SYSTEM_VC=FALSE
            run_tests: false
          - name: CUDA
            container: ghcr.io/acts-project/ubuntu2404_cuda:56
            options: --preset cuda-fp32
            run_tests: false
          - name: SYCL
            container: ghcr.io/acts-project/ubuntu2404_oneapi:56
            options: --preset sycl-fp32 -DCMAKE_SYCL_FLAGS="-fsycl -fsycl-targets=spir64"
            run_tests: true
          - name: KOKKOS
            container: ghcr.io/acts-project/ubuntu2404:56
            options: --preset kokkos-fp32
            run_tests: false
        build:
          - Release
          - Debug
        include:
          - platform:
              name: CUDA
              container: ghcr.io/acts-project/ubuntu2404_cuda:56
              options: --preset cuda-fp64
              run_tests: false
            build: Release
          - platform:
              name: "SYCL"
              container: ghcr.io/acts-project/ubuntu2404_cuda_oneapi:56
              options: --preset sycl-fp32
              run_tests: false
            build: Release
          - platform:
              name: "SYCL"
              container: ghcr.io/acts-project/ubuntu2404_rocm_oneapi:56
              options: --preset sycl-fp32
              run_tests: false
            build: Release
          - platform:
              name: ALPAKA
              container: ghcr.io/acts-project/ubuntu2404:56
              options: --preset alpaka-fp32
              run_tests: true
            build: Release
          - platform:
              name: ALPAKA
              container: ghcr.io/acts-project/ubuntu2404:56
              options: --preset alpaka-fp32
              run_tests: false
            build: Debug
    # Use BASH as the shell from the images.
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - name: Configure
        run: |
          source ${GITHUB_WORKSPACE}/.github/ci_setup.sh ${{ matrix.platform.name }}
          cmake \
            -DCMAKE_BUILD_TYPE=${{ matrix.build }} \
            ${{ matrix.platform.options }} \
            -S ${GITHUB_WORKSPACE} \
            -B build
      - name: Build
        run: |
          source ${GITHUB_WORKSPACE}/.github/ci_setup.sh ${{ matrix.platform.name }}
          cmake --build build
      - name: Download data files
        if: "matrix.platform.run_tests"
        run: data/traccc_data_get_files.sh
      - name: Test
        if: "matrix.platform.run_tests"
        run: |
          cd build
          source ${GITHUB_WORKSPACE}/.github/ci_setup.sh ${{ matrix.platform.name }}
          ctest --output-on-failure
      - name: FP64 Compliance
        if: "matrix.platform.name == 'CUDA' && matrix.build == 'Debug'"
        continue-on-error: true
        run: ${GITHUB_WORKSPACE}/.github/find_f64_ptx.py --source ${GITHUB_WORKSPACE} --build build $(find build -name "*.ptx")

  macos:
    runs-on: macos-14
    name: macOS-Release
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: brew install boost
      - name: Configure
        run: cmake --preset base-fp32 -S ${GITHUB_WORKSPACE} -B build
      - name: Build
        run: cmake --build build
      - name: Download data files
        run: ${GITHUB_WORKSPACE}/data/traccc_data_get_files.sh
      - name: Test
        run: ctest --test-dir build --output-on-failure
