/* VecMem project, part of the ACTS project (R&D line)
 *
 * (c) 2021-2024 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// Local include(s).
#include "../utils/sycl/get_queue.hpp"
#include "vecmem/memory/sycl/device_memory_resource.hpp"
#include "vecmem/utils/debug.hpp"

// SYCL include(s).
#include <sycl/sycl.hpp>

namespace vecmem::sycl {

device_memory_resource::device_memory_resource(const queue_wrapper& queue)
    : memory_resource_base(queue) {}

device_memory_resource::~device_memory_resource() = default;

void* device_memory_resource::do_allocate(std::size_t nbytes,
                                          std::size_t alignment) {

    if (nbytes == 0) {
        return nullptr;
    }

    // Allocate the memory.
    void* result = ::sycl::aligned_alloc_device(alignment, nbytes,
                                                details::get_queue(m_queue));

    // Check that the allocation succeeded.
    if (result == nullptr) {
        throw std::bad_alloc();
    }

    // Let the user know what's happening.
    VECMEM_DEBUG_MSG(
        2, "Allocated %ld bytes of (%ld aligned) device memory on \"%s\" at %p",
        nbytes, alignment,
        details::get_queue(m_queue)
            .get_device()
            .get_info<::sycl::info::device::name>()
            .c_str(),
        result);

    // Return the allocated block's pointer.
    return result;
}

}  // namespace vecmem::sycl
