/*
 * VecMem project, part of the ACTS project (R&D line)
 *
 * (c) 2021-2024 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// SYCL include(s).
#include <sycl/sycl.hpp>

// VecMem include(s).
#include "get_queue.hpp"
#include "vecmem/utils/debug.hpp"
#include "vecmem/utils/sycl/async_copy.hpp"

// System include(s).
#include <algorithm>
#include <exception>
#include <vector>

namespace {

/// SYCL specific implementation of the abstract event interface
struct sycl_event : public vecmem::abstract_event {

    /// Constructor with a SYCL event
    sycl_event(const std::vector<::sycl::event>& events) : m_events(events) {}
    /// Destructor
    ~sycl_event() {
        // Check if the user forgot to wait on this asynchronous event.
        if (!m_events.empty()) {
            // If so, wait implicitly now.
            VECMEM_DEBUG_MSG(1, "Asynchronous SYCL event was not waited on!");
            wait();
#ifdef VECMEM_FAIL_ON_ASYNC_ERRORS
            // If the user wants to fail on asynchronous errors, do so now.
            std::terminate();
#endif  // VECMEM_FAIL_ON_ASYNC_ERRORS
        }
    }

    /// Synchronize on the underlying SYCL event
    virtual void wait() override {
        ::sycl::event::wait_and_throw(m_events);
        ignore();
    }

    /// Ignore the underlying SYCL event
    virtual void ignore() override { m_events.clear(); }

    /// The managed SYCL event
    std::vector<::sycl::event> m_events;

};  // struct sycl_event

}  // namespace

namespace vecmem::sycl {
namespace details {

struct async_copy_data {
    queue_wrapper m_queue;
    std::vector<::sycl::event> m_events;
};

}  // namespace details

async_copy::async_copy(const queue_wrapper& queue)
    : m_data(new details::async_copy_data{queue, {}}) {}

async_copy::~async_copy() {}

void async_copy::do_copy(std::size_t size, const void* from_ptr, void* to_ptr,
                         type::copy_type) const {

    // Check if anything needs to be done.
    if (size == 0) {
        VECMEM_DEBUG_MSG(5, "Skipping unnecessary memory copy");
        return;
    }

    // Some sanity checks.
    assert(from_ptr != nullptr);
    assert(to_ptr != nullptr);

    // Perform the copy.
    m_data->m_events.push_back(
        details::get_queue(m_data->m_queue).memcpy(to_ptr, from_ptr, size));

    // Let the user know what happened.
    VECMEM_DEBUG_MSG(1, "Performed memory copy of %lu bytes from %p to %p",
                     size, from_ptr, to_ptr);
}

void async_copy::do_memset(std::size_t size, void* ptr, int value) const {

    // Check if anything needs to be done.
    if (size == 0) {
        VECMEM_DEBUG_MSG(5, "Skipping unnecessary memory filling");
        return;
    }

    // Some sanity checks.
    assert(ptr != nullptr);

    // Perform the operation.
#if defined(VECMEM_HAVE_SYCL_MEMSET)
    m_data->m_events.push_back(
        details::get_queue(m_data->m_queue).memset(ptr, value, size));
#else
    // We can not perform this operation asynchronously, since the data used
    // in the copy only exists as long as this function is executing. So we
    // don't record this event, but rather wait it out right here.
    std::vector<int> dummy(size / sizeof(int) + 1);
    std::fill_n(reinterpret_cast<unsigned char*>(dummy.data()), size,
                static_cast<unsigned char>(value));
    details::get_queue(m_data->m_queue)
        .memcpy(ptr, dummy.data(), size)
        .wait_and_throw();
#endif  // VECMEM_HAVE_SYCL_MEMSET

    // Let the user know what happened.
    VECMEM_DEBUG_MSG(2, "Set %lu bytes to %i at %p with SYCL", size, value,
                     ptr);
}

copy::event_type async_copy::create_event() const {

    // Construct an event object out of all of the events collected.
    auto result = std::make_unique<::sycl_event>(m_data->m_events);
    // Forget about the events in this object.
    m_data->m_events.clear();
    // Return the event object.
    return result;
}

}  // namespace vecmem::sycl
