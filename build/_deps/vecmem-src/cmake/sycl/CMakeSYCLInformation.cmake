# VecMem project, part of the ACTS project (R&D line)
#
# (c) 2021-2024 CERN for the benefit of the ACTS project
#
# Mozilla Public License Version 2.0

# Common CMake include(s).
include( CMakeCommonLanguageInclude )

# Set up platform specific flags.
include( Platform/${CMAKE_EFFECTIVE_SYSTEM_NAME}-${CMAKE_SYCL_COMPILER_ID}-SYCL
   OPTIONAL )

# Set up how SYCL object file compilation should go.
if( NOT DEFINED CMAKE_SYCL_COMPILE_OBJECT )
   set( CMAKE_SYCL_COMPILE_OBJECT
      "<CMAKE_SYCL_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -o <OBJECT> -c <SOURCE>" )
endif()

# Set up how shared library building should go.
if( NOT DEFINED CMAKE_SHARED_LIBRARY_CREATE_SYCL_FLAGS )
   set( CMAKE_SHARED_LIBRARY_CREATE_SYCL_FLAGS
      "${CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS}" )
endif()
if( NOT DEFINED CMAKE_SHARED_LIBRARY_SYCL_FLAGS )
   set( CMAKE_SHARED_LIBRARY_SYCL_FLAGS
      "${CMAKE_SHARED_LIBRARY_CXX_FLAGS}" )
endif()
if( NOT DEFINED CMAKE_SHARED_LIBRARY_LINK_SYCL_FLAGS )
   set( CMAKE_SHARED_LIBRARY_LINK_SYCL_FLAGS
      "${CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS}" )
endif()
if( NOT DEFINED CMAKE_SHARED_LIBRARY_RUNTIME_SYCL_FLAG )
   set( CMAKE_SHARED_LIBRARY_RUNTIME_SYCL_FLAG
      "${CMAKE_SHARED_LIBRARY_RUNTIME_CXX_FLAG}" )
endif()
if( NOT DEFINED CMAKE_SHARED_LIBRARY_RUNTIME_SYCL_FLAG_SEP )
   set( CMAKE_SHARED_LIBRARY_RUNTIME_SYCL_FLAG_SEP
      "${CMAKE_SHARED_LIBRARY_RUNTIME_CXX_FLAG_SEP}" )
endif()
if( NOT DEFINED CMAKE_SHARED_LIBRARY_RPATH_LINK_SYCL_FLAG )
   set( CMAKE_SHARED_LIBRARY_RPATH_LINK_SYCL_FLAG
      "${CMAKE_SHARED_LIBRARY_RPATH_LINK_CXX_FLAG}" )
endif()
if( NOT DEFINED CMAKE_SHARED_LIBRARY_EXPORTS_SYCL_FLAG )
   set( CMAKE_SHARED_LIBRARY_EXPORTS_SYCL_FLAG
      "${CMAKE_SHARED_LIBRARY_EXPORTS_CXX_FLAG}" )
endif()
if( NOT DEFINED CMAKE_SHARED_LIBRARY_SONAME_SYCL_FLAG )
   set( CMAKE_SHARED_LIBRARY_SONAME_SYCL_FLAG
      "${CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG}" )
endif()
if( NOT DEFINED CMAKE_SYCL_CREATE_SHARED_LIBRARY )
   set( CMAKE_SYCL_CREATE_SHARED_LIBRARY
      "\"${CMAKE_SYCL_HOST_LINKER}\" <CMAKE_SHARED_LIBRARY_SYCL_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_SYCL_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>" )
endif()

# Set up how module library building should go.
if( NOT DEFINED CMAKE_SHARED_MODULE_CREATE_SYCL_FLAGS )
   set( CMAKE_SHARED_MODULE_CREATE_SYCL_FLAGS
      "${CMAKE_SHARED_MODULE_CREATE_CXX_FLAGS}" )
endif()
if( NOT DEFINED CMAKE_SHARED_MODULE_SYCL_FLAGS )
   set( CMAKE_SHARED_MODULE_SYCL_FLAGS
      "${CMAKE_SHARED_MODULE_CXX_FLAGS}" )
endif()
if( NOT DEFINED CMAKE_SHARED_MODULE_LINK_SYCL_FLAGS )
   set( CMAKE_SHARED_MODULE_LINK_SYCL_FLAGS
      "${CMAKE_SHARED_MODULE_LINK_CXX_FLAGS}" )
endif()
if( NOT DEFINED CMAKE_SHARED_MODULE_RUNTIME_SYCL_FLAG )
   set( CMAKE_SHARED_MODULE_RUNTIME_SYCL_FLAG
      "${CMAKE_SHARED_MODULE_RUNTIME_CXX_FLAG}" )
endif()
if( NOT DEFINED CMAKE_SHARED_MODULE_RUNTIME_SYCL_FLAG_SEP )
   set( CMAKE_SHARED_MODULE_RUNTIME_SYCL_FLAG_SEP
      "${CMAKE_SHARED_MODULE_RUNTIME_CXX_FLAG_SEP}" )
endif()
if( NOT DEFINED CMAKE_SHARED_MODULE_RPATH_LINK_SYCL_FLAG )
   set( CMAKE_SHARED_MODULE_RPATH_LINK_SYCL_FLAG
      "${CMAKE_SHARED_MODULE_RPATH_LINK_CXX_FLAG}" )
endif()
if( NOT DEFINED CMAKE_SHARED_MODULE_EXPORTS_SYCL_FLAG )
   set( CMAKE_SHARED_MODULE_EXPORTS_SYCL_FLAG
      "${CMAKE_SHARED_MODULE_EXPORTS_CXX_FLAG}" )
endif()
if( NOT DEFINED CMAKE_SHARED_MODULE_SONAME_SYCL_FLAG )
   set( CMAKE_SHARED_MODULE_SONAME_SYCL_FLAG
      "${CMAKE_SHARED_MODULE_SONAME_CXX_FLAG}" )
endif()
if( NOT DEFINED CMAKE_SYCL_CREATE_SHARED_MODULE )
   set( CMAKE_SYCL_CREATE_SHARED_MODULE
      "\"${CMAKE_SYCL_HOST_LINKER}\" <CMAKE_SHARED_MODULE_SYCL_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_MODULE_CREATE_SYCL_FLAGS> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>" )
endif()

# Set up how static library building should go.
if( NOT DEFINED CMAKE_SYCL_CREATE_STATIC_LIBRARY )
   set( CMAKE_SYCL_CREATE_STATIC_LIBRARY "${CMAKE_CXX_CREATE_STATIC_LIBRARY}" )
endif()

# Set up how executable building should go.
if( NOT DEFINED CMAKE_SYCL_LINK_FLAGS )
   set( CMAKE_SYCL_LINK_FLAGS
      "${CMAKE_CXX_LINK_FLAGS}" )
endif()
if( NOT DEFINED CMAKE_EXECUTABLE_RUNTIME_SYCL_FLAG )
   set( CMAKE_EXECUTABLE_RUNTIME_SYCL_FLAG
      "${CMAKE_EXECUTABLE_RUNTIME_CXX_FLAG}" )
endif()
if( NOT DEFINED CMAKE_EXECUTABLE_RUNTIME_SYCL_FLAG_SEP )
   set( CMAKE_EXECUTABLE_RUNTIME_SYCL_FLAG_SEP
      "${CMAKE_EXECUTABLE_RUNTIME_CXX_FLAG_SEP}" )
endif()
if( NOT DEFINED CMAKE_EXECUTABLE_RPATH_LINK_SYCL_FLAG )
   set( CMAKE_EXECUTABLE_RPATH_LINK_SYCL_FLAG
      "${CMAKE_EXECUTABLE_RPATH_LINK_CXX_FLAG}" )
endif()
if( NOT DEFINED CMAKE_SYCL_LINK_EXECUTABLE )
   set( CMAKE_SYCL_LINK_EXECUTABLE
      "\"${CMAKE_SYCL_HOST_LINKER}\" <FLAGS> <CMAKE_SYCL_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>" )
endif()

# Set the include flag(s).
if( NOT DEFINED CMAKE_INCLUDE_FLAG_SYCL )
   set( CMAKE_INCLUDE_FLAG_SYCL "${CMAKE_INCLUDE_FLAG_CXX}" )
endif()
if( NOT DEFINED CMAKE_INCLUDE_SYSTEM_FLAG_SYCL )
   set( CMAKE_INCLUDE_SYSTEM_FLAG_SYCL "${CMAKE_INCLUDE_SYSTEM_FLAG_CXX}" )
endif()

# By default don't specify standard C++ include paths, library paths and
# libraries for the SYCL link commands.
if( NOT DEFINED CMAKE_SYCL_IMPLICIT_INCLUDE_DIRECTORIES )
   set( CMAKE_SYCL_IMPLICIT_INCLUDE_DIRECTORIES
      "${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES}" )
endif()
if( NOT DEFINED CMAKE_SYCL_IMPLICIT_LINK_LIBRARIES )
   set( CMAKE_SYCL_IMPLICIT_LINK_LIBRARIES
      "${CMAKE_CXX_IMPLICIT_LINK_LIBRARIES}" )
endif()
if( NOT DEFINED CMAKE_SYCL_IMPLICIT_LINK_DIRECTORIES )
   set( CMAKE_SYCL_IMPLICIT_LINK_DIRECTORIES
      "${CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES}" )
endif()

# Set up the default flags for the SYCL build.
set( CMAKE_SYCL_FLAGS_INIT "${CMAKE_SYCL_FLAGS_INIT} $ENV{SYCLFLAGS}" )
cmake_initialize_per_config_variable( CMAKE_SYCL_FLAGS
   "Flags used by the SYCL compiler" )
set( CMAKE_SYCL_FLAGS
   "${CMAKE_SYCL_FLAGS} ${CMAKE_SYCL${CMAKE_SYCL_STANDARD}_STANDARD_COMPILE_OPTION}" )

# Tell CMake that the information was loaded.
set( CMAKE_SYCL_INFORMATION_LOADED TRUE )
