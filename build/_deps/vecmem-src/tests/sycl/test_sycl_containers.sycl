/* VecMem project, part of the ACTS project (R&D line)
 *
 * (c) 2021-2024 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// SYCL include(s).
#include <sycl/sycl.hpp>

// Local include(s).
#include "vecmem/containers/array.hpp"
#include "vecmem/containers/data/jagged_vector_buffer.hpp"
#include "vecmem/containers/device_array.hpp"
#include "vecmem/containers/device_vector.hpp"
#include "vecmem/containers/jagged_device_vector.hpp"
#include "vecmem/containers/static_array.hpp"
#include "vecmem/containers/vector.hpp"
#include "vecmem/memory/atomic.hpp"
#include "vecmem/memory/device_atomic_ref.hpp"
#include "vecmem/memory/sycl/device_memory_resource.hpp"
#include "vecmem/memory/sycl/host_memory_resource.hpp"
#include "vecmem/memory/sycl/shared_memory_resource.hpp"
#include "vecmem/utils/sycl/async_copy.hpp"
#include "vecmem/utils/sycl/copy.hpp"
#include "vecmem/utils/sycl/local_accessor.hpp"
#include "vecmem/utils/tuple.hpp"

// GoogleTest include(s).
#include <gtest/gtest.h>

/// Test fixture for the on-device vecmem container tests
class sycl_containers_test : public testing::Test {};

/// Test a linear transformation using the shared memory resource
TEST_F(sycl_containers_test, shared_memory) {

    // Create the SYCL queue that we'll be using in the test.
    ::sycl::queue queue;

    // The shared memory resource.
    vecmem::sycl::shared_memory_resource resource(&queue);

    // Create an input and an output vector in host (managed) memory.
    vecmem::vector<int> inputvec({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, &resource);
    vecmem::vector<int> outputvec(inputvec.size(), &resource);
    EXPECT_EQ(inputvec.size(), outputvec.size());

    // Create the array that is used in the linear transformation.
    vecmem::array<int, 2> constants(resource);
    constants[0] = 2;
    constants[1] = 3;

    // Perform a linear transformation using the vecmem vector helper types.
    queue
        .submit([&constants, &inputvec, &outputvec](::sycl::handler& h) {
            // Run the kernel.
            h.parallel_for<class LinearTransform1>(
                ::sycl::range<1>(inputvec.size()),
                [constants = vecmem::get_data(constants),
                 input = vecmem::get_data(inputvec),
                 output = vecmem::get_data(outputvec)](::sycl::id<1> id) {
                    // Skip invalid indices.
                    const vecmem::device_vector<int>::size_type i =
                        static_cast<vecmem::device_vector<int>::size_type>(
                            id[0]);
                    if (i >= input.size()) {
                        return;
                    }

                    // Create the helper containers.
                    const vecmem::device_array<const int, 2> constantarray1(
                        constants);
                    const vecmem::static_array<int, 2> constantarray2 = {
                        constantarray1[0], constantarray1[1]};
                    auto tuple1 = vecmem::make_tuple(constantarray1[0],
                                                     constantarray1[1]);
                    auto tuple2 = vecmem::tie(constantarray1, constantarray2);
                    const vecmem::device_vector<const int> inputvec(input);
                    vecmem::device_vector<int> outputvec(output);

                    // Perform the linear transformation.
                    outputvec.at(i) = inputvec.at(i) * constantarray1.at(0) +
                                      vecmem::get<1>(constantarray2) +
                                      vecmem::get<0>(tuple1) -
                                      vecmem::get<1>(tuple2)[0];
                    return;
                });
        })
        .wait_and_throw();

    // Check the output.
    EXPECT_EQ(inputvec.size(), outputvec.size());
    for (std::size_t i = 0; i < outputvec.size(); ++i) {
        EXPECT_EQ(outputvec.at(i),
                  inputvec.at(i) * constants[0] + constants[1]);
    }
}

/// Test a linear transformation using the host/device memory resources
TEST_F(sycl_containers_test, device_memory) {

    // Create the SYCL queue that we'll be using in the test.
    ::sycl::queue queue;

    // The memory resources.
    vecmem::sycl::host_memory_resource host_resource(&queue);
    vecmem::sycl::device_memory_resource device_resource(&queue);

    // Helper object for performing memory copies.
    vecmem::sycl::async_copy copy(&queue);

    // Create an input and an output vector in host memory.
    vecmem::vector<int> inputvec({1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
                                 &host_resource);
    vecmem::vector<int> outputvec(inputvec.size(), &host_resource);
    EXPECT_EQ(inputvec.size(), outputvec.size());

    // Allocate a device memory block for the output container.
    auto outputvechost = vecmem::get_data(outputvec);
    vecmem::data::vector_buffer<int> outputvecdevice(
        static_cast<vecmem::data::vector_buffer<int>::size_type>(
            outputvec.size()),
        device_resource);
    copy.setup(outputvecdevice)->wait();

    // Create the array that is used in the linear transformation.
    vecmem::array<int, 2> constants(host_resource);
    constants[0] = 2;
    constants[1] = 3;

    // Explicitly copy the input objects to the device. We need to do it outside
    // of the @c sycl::queue::submit call, as the local variables of the lambda
    // given to that function are deleted before the kernel would run.
    auto const_data = copy.to(vecmem::get_data(constants), device_resource);
    auto input_data = copy.to(vecmem::get_data(inputvec), device_resource);

    // Perform a linear transformation using the vecmem vector helper types.
    queue
        .submit([&const_data, &input_data,
                 &outputvecdevice](::sycl::handler& h) {
            // Run the kernel.
            h.parallel_for<class LinearTransform2>(
                ::sycl::range<1>(input_data.size()),
                [constants = vecmem::get_data(const_data),
                 input = vecmem::get_data(input_data),
                 output = vecmem::get_data(outputvecdevice)](::sycl::id<1> id) {
                    // Skip invalid indices.
                    const vecmem::device_vector<int>::size_type i =
                        static_cast<vecmem::device_vector<int>::size_type>(
                            id[0]);
                    if (i >= input.size()) {
                        return;
                    }

                    // Create the helper containers.
                    const vecmem::device_array<const int, 2> constantarray(
                        constants);
                    const vecmem::device_vector<const int> inputvec(input);
                    vecmem::device_vector<int> outputvec(output);

                    // Perform the linear transformation.
                    outputvec.at(i) = inputvec.at(i) * constantarray.at(0) +
                                      constantarray.at(1);
                    return;
                });
        })
        .wait_and_throw();

    // Copy the data back to the host, and explicitly wait for the copy
    // operation to finish.
    copy(outputvecdevice, outputvechost)->wait();

    // Check the output.
    EXPECT_EQ(inputvec.size(), outputvec.size());
    for (std::size_t i = 0; i < outputvec.size(); ++i) {
        EXPECT_EQ(outputvec.at(i),
                  inputvec.at(i) * constants[0] + constants[1]);
    }
}

/// Test atomic access to shared memory
TEST_F(sycl_containers_test, atomic_shared_memory) {

    // Create the SYCL queue that we'll be using in the test.
    ::sycl::queue queue;

    // The memory resources.
    vecmem::sycl::shared_memory_resource resource(&queue);

    // Allocate memory on it that would be modified atomically.
    vecmem::vector<int> buffer(100, 0, &resource);

    // Number of iterations performed on a single buffer element.
    static constexpr int ITERATIONS = 100;

    // Do very basic atomic modifications on the buffer.
    queue
        .submit([&buffer](::sycl::handler& h) {
            h.parallel_for<class AtomicSharedTests>(
                ::sycl::range<1>(buffer.size() * ITERATIONS),
                [buffer = vecmem::get_data(buffer)](::sycl::item<1> id) {
                    // Check if anything needs to be done.
                    const std::size_t i = id[0];
                    if (i >= buffer.size() * ITERATIONS) {
                        return;
                    }

                    // Index/pointer to modify.
                    const std::size_t index = i % buffer.size();
                    int* ptr = buffer.ptr() + index;

                    // Do some simple stuff with it using vecmem::atomic.
                    vecmem::atomic<int> a(ptr);
                    a.fetch_add(4);
                    a.fetch_sub(2);
                    a.fetch_and(0x7fffffff);
                    a.fetch_or(0x00000000);

                    // Do the same simple stuff with it using
                    // vecmem::atomic_ref.
                    vecmem::device_atomic_ref<int> a2(*ptr);
                    a2.fetch_add(4);
                    a2.fetch_sub(2);
                    a2.fetch_and(0x7fffffff);
                    a2.fetch_or(0x00000000);
                });
        })
        .wait_and_throw();

    // Check the output.
    for (int value : buffer) {
        EXPECT_EQ(value, ITERATIONS * 4);
    }
}

/// Test atomic access to device memory
TEST_F(sycl_containers_test, atomic_device_memory) {

    // Create the SYCL queue that we'll be using in the test.
    ::sycl::queue queue;

    // The memory resources.
    vecmem::sycl::host_memory_resource host_resource(&queue);
    vecmem::sycl::device_memory_resource device_resource(&queue);

    // Helper object for performing memory copies.
    vecmem::sycl::async_copy copy(&queue);

    // Allocate memory on the host, and set initial values in it.
    vecmem::vector<int> host_vector(100, 0, &host_resource);

    // Set up a device buffer with the data.
    auto device_buffer =
        copy.to(vecmem::get_data(host_vector), device_resource);

    // Number of iterations performed on a single buffer element.
    static constexpr int ITERATIONS = 100;

    // Do very basic atomic modifications on the buffer.
    queue
        .submit([&device_buffer](::sycl::handler& h) {
            h.parallel_for<class AtomicDeviceTests>(
                ::sycl::range<1>(device_buffer.size() * ITERATIONS),
                [buffer = vecmem::get_data(device_buffer)](::sycl::item<1> id) {
                    // Check if anything needs to be done.
                    const std::size_t i = id[0];
                    if (i >= buffer.size() * ITERATIONS) {
                        return;
                    }

                    // Index/pointer to modify.
                    const std::size_t index = i % buffer.size();
                    int* ptr = buffer.ptr() + index;

                    // Do some simple stuff with it using vecmem::atomic.
                    vecmem::atomic<int> a(ptr);
                    a.fetch_add(4);
                    a.fetch_sub(2);
                    a.fetch_and(0x7fffffff);
                    a.fetch_or(0x00000000);

                    // Do the same simple stuff with it using
                    // vecmem::atomic_ref.
                    vecmem::device_atomic_ref<int> a2(*ptr);
                    a2.fetch_add(4);
                    a2.fetch_sub(2);
                    a2.fetch_and(0x7fffffff);
                    a2.fetch_or(0x00000000);
                });
        })
        .wait_and_throw();

    // Copy the data back to the host.
    copy(device_buffer, vecmem::get_data(host_vector))->wait();

    // Check the output.
    for (int value : host_vector) {
        EXPECT_EQ(value, ITERATIONS * 4);
    }
}

/// Test atomic access to local memory
TEST_F(sycl_containers_test, atomic_local_ref) {

    // Create the SYCL queue that we'll be using in the test.
    ::sycl::queue queue;

    // Skip test if not running on a gpu.
    if (queue.get_device().get_info<::sycl::info::device::device_type>() !=
        ::sycl::info::device_type::gpu) {
        GTEST_SKIP();
    }

    // The memory resources.
    vecmem::sycl::host_memory_resource host_resource(&queue);
    vecmem::sycl::device_memory_resource device_resource(&queue);

    // Helper object for performing memory copies.
    vecmem::sycl::async_copy copy(&queue);

    // Local block size.
    static constexpr int BLOCKSIZE = 128;

    // Number of blocks.
    static constexpr int NUMBLOCKS = 5;

    // Allocate memory on the host, and set initial values in it.
    vecmem::vector<int> host_vector(NUMBLOCKS, 0, &host_resource);

    // Set up a device buffer with the data.
    auto device_buffer =
        copy.to(vecmem::get_data(host_vector), device_resource);

    // Do basic atomic addition on local memory.
    queue
        .submit([&device_buffer](::sycl::handler& h) {
            vecmem::sycl::local_accessor<int> shared(1, h);

            h.parallel_for<class AtomicLocalRefTests>(
                ::sycl::nd_range<1>(BLOCKSIZE * NUMBLOCKS, BLOCKSIZE),
                [buffer = vecmem::get_data(device_buffer),
                 shared](::sycl::nd_item<1> item) {
                    // Do simple stuff using local atomic ref
                    const int i = item.get_group_linear_id();

                    // Initialise shared memory variable
                    if (item.get_local_linear_id() == 0) {
                        shared[0] = 0;
                    }
                    item.barrier();

                    // Perform basic atomic operations on local memory.
                    vecmem::device_atomic_ref<
                        int, vecmem::device_address_space::local>
                        atom(shared[0]);
                    atom.fetch_add(2 * i);
                    atom.fetch_sub(i);
                    atom.fetch_and(0x7fffffff);
                    atom.fetch_or(0x00000000);

                    // Wait for work to be done
                    item.barrier();

                    // Write result to global memory
                    if (item.get_local_linear_id() == 0) {
                        vecmem::device_vector<int> dev(buffer);
                        dev.at(i) = shared[0];
                    }
                });
        })
        .wait_and_throw();

    // Copy data back to the host.
    copy(device_buffer, vecmem::get_data(host_vector))->wait();

    // Check the output.
    for (std::size_t i = 0; i < NUMBLOCKS; ++i) {
        EXPECT_EQ(host_vector[i], i * BLOCKSIZE);
    }
}

/// Test the usage of extendable vectors in a kernel
TEST_F(sycl_containers_test, extendable_memory) {

    // Create the SYCL queue that we'll be using in the test.
    ::sycl::queue queue;

    // The memory resources.
    vecmem::sycl::host_memory_resource host_resource(&queue);
    vecmem::sycl::device_memory_resource device_resource(&queue);
    vecmem::sycl::shared_memory_resource shared_resource(&queue);

    // Helper object for performing memory copies.
    vecmem::sycl::copy copy(&queue);

    // Create a small (input) vector in shared memory.
    vecmem::vector<int> input(&shared_resource);
    for (int i = 0; i < 100; ++i) {
        input.push_back(i);
    }

    // Create a buffer that will hold the filtered elements of the input vector.
    vecmem::data::vector_buffer<int> output_buffer(
        static_cast<vecmem::data::vector_buffer<int>::size_type>(input.size()),
        device_resource, vecmem::data::buffer_type::resizable);
    copy.setup(output_buffer)->wait();

    // Run a kernel that filters the elements of the input vector.
    queue
        .submit([&input, &output_buffer](::sycl::handler& h) {
            h.parallel_for<class FilterTests>(
                ::sycl::range<1>(input.size()),
                [input = vecmem::get_data(input),
                 output = vecmem::get_data(output_buffer)](::sycl::item<1> id) {
                    // Check if anything needs to be done.
                    const vecmem::device_vector<int>::size_type i =
                        static_cast<vecmem::device_vector<int>::size_type>(
                            id[0]);
                    if (i >= input.size()) {
                        return;
                    }

                    // Set up the vector objects.
                    const vecmem::device_vector<const int> inputvec(input);
                    vecmem::device_vector<int> outputvec(output);

                    // Add this thread's element, if it passes the selection.
                    const int element = inputvec.at(i);
                    if (element > 10) {
                        outputvec.push_back(element);
                    }
                });
        })
        .wait_and_throw();

    // Copy the output into the host's memory.
    vecmem::vector<int> output(&host_resource);
    copy(output_buffer, output)->wait();

    // Check its contents.
    EXPECT_EQ(output.size(), static_cast<vecmem::vector<int>::size_type>(89));
    for (int value : output) {
        EXPECT_LT(10, value);
    }
}

/// Test the usage of an @c array<vector<...>> construct
TEST_F(sycl_containers_test, array_memory) {

    // Create the SYCL queue that we'll be using in the test.
    ::sycl::queue queue;

    // The memory resource(s).
    vecmem::sycl::shared_memory_resource shared_resource(&queue);

    // Create an array of vectors.
    vecmem::static_array<vecmem::vector<int>, 4> vec_array{
        vecmem::vector<int>{{1, 2, 3, 4}, &shared_resource},
        vecmem::vector<int>{{5, 6}, &shared_resource},
        vecmem::vector<int>{{7, 8, 9}, &shared_resource},
        vecmem::vector<int>{&shared_resource}};

    // Create an appropriate data object out of it.
    vecmem::static_array<vecmem::data::vector_view<int>, 4> vec_data{
        vecmem::get_data(vec_array[0]), vecmem::get_data(vec_array[1]),
        vecmem::get_data(vec_array[2]), vecmem::get_data(vec_array[3])};

    // Run a kernel on it that multiplies each element in the array of vectors
    // by 2.
    queue
        .submit([&vec_data](::sycl::handler& h) {
            h.parallel_for<class ArrayVecTest>(
                ::sycl::range<2>(4, 4), [data = vec_data](::sycl::item<2> id) {
                    // Check if anything needs to be done.
                    if (id[0] >= data.size()) {
                        return;
                    }
                    if (id[1] >= data[id[0]].size()) {
                        return;
                    }

                    // Create the "device type".
                    vecmem::static_array<vecmem::device_vector<int>, 4> vec{
                        vecmem::device_vector<int>{data[0]},
                        vecmem::device_vector<int>{data[1]},
                        vecmem::device_vector<int>{data[2]},
                        vecmem::device_vector<int>{data[3]}};

                    // Perform the transformation.
                    vec[static_cast<vecmem::static_array<
                        vecmem::device_vector<int>, 4>::size_type>(id[0])]
                       [static_cast<vecmem::device_vector<int>::size_type>(
                           id[1])] *= 2;
                });
        })
        .wait_and_throw();

    // Check its contents.
    EXPECT_EQ(vec_array.at(0).at(0), 2);
    EXPECT_EQ(vec_array.at(0).at(1), 4);
    EXPECT_EQ(vec_array.at(0).at(2), 6);
    EXPECT_EQ(vec_array.at(0).at(3), 8);
    EXPECT_EQ(vec_array.at(1).at(0), 10);
    EXPECT_EQ(vec_array.at(1).at(1), 12);
    EXPECT_EQ(vec_array.at(2).at(0), 14);
    EXPECT_EQ(vec_array.at(2).at(1), 16);
    EXPECT_EQ(vec_array.at(2).at(2), 18);
    EXPECT_EQ(vec_array.at(3).size(), 0u);
}

/// Test buffers with "large" elements (for which alignment becomes important)
TEST_F(sycl_containers_test, large_buffer) {

    // Create the SYCL queue that we'll be using in the test.
    ::sycl::queue queue;

    // The memory resource(s).
    vecmem::sycl::shared_memory_resource shared_resource{&queue};

    // Helper object for performing memory copies.
    vecmem::sycl::copy copy(&queue);

    // Test a (1D) vector.
    vecmem::data::vector_buffer<unsigned long> buffer1(
        100, shared_resource, vecmem::data::buffer_type::resizable);
    copy.setup(buffer1)->wait();

    // Run a kernel that enlarges the (1D) buffer.
    queue
        .submit([&buffer1](::sycl::handler& h) {
            h.parallel_for<class BufferResize>(
                ::sycl::range<1>(1),
                [data = vecmem::get_data(buffer1)](::sycl::item<1> id) {
                    // Check if anything needs to be done.
                    if (id[0] != 0) {
                        return;
                    }

                    // Perform the resize operations.
                    vecmem::device_vector<unsigned long> vec(data);
                    assert(vec.size() == 0);
                    vec.push_back(0);
                    vec.bulk_append(5);
                    vec.bulk_append(5, 2);
                    vec.bulk_append_implicit(5);
                    vec.bulk_append_implicit_unsafe(5);
                });
        })
        .wait_and_throw();

    // Check the results.
    EXPECT_EQ(copy.get_size(buffer1), 21u);

    // Test a (2D) jagged vector.
    vecmem::data::jagged_vector_buffer<unsigned long> buffer2(
        {100, 100, 100}, shared_resource, nullptr,
        vecmem::data::buffer_type::resizable);
    copy.setup(buffer2)->wait();

    // Run a kernel that enlarges the (jagged) buffer.
    queue
        .submit([&buffer2](::sycl::handler& h) {
            h.parallel_for<class JaggedBufferResize>(
                ::sycl::range<1>(1),
                [data = vecmem::get_data(buffer2)](::sycl::item<1> id) {
                    // Check if anything needs to be done.
                    if (id[0] != 0) {
                        return;
                    }

                    // Perform the resize operations.
                    vecmem::jagged_device_vector<unsigned long> vec(data);
                    assert(vec.size() == 3);
                    assert(vec.at(1).size() == 0);
                    vec.at(0).resize_implicit(5);
                    vec.at(1).push_back(0);
                    vec.at(1).bulk_append(5);
                    vec.at(1).bulk_append(5, 2);
                    vec.at(1).bulk_append_implicit(5);
                    vec.at(1).bulk_append_implicit_unsafe(5);
                    vec.at(2).resize_implicit_unsafe(10);
                });
        })
        .wait_and_throw();

    // Check the results.
    EXPECT_EQ(copy.get_sizes(buffer2),
              std::vector<unsigned int>({5u, 21u, 10u}));
}
