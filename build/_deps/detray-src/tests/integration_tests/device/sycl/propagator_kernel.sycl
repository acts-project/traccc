/** Detray library, part of the ACTS project (R&D line)
 *
 * (c) 2023-2024 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// Detray test include(s)
#include "detray/test/device/propagator_test.hpp"
#include "propagator_sycl_kernel.hpp"

namespace detray {

/// Test function for propagator
template <typename bfield_bknd_t, typename detector_t>
void propagator_test(
    typename detector_t::view_type det_data, const propagation::config& cfg,
    covfie::field_view<bfield_bknd_t> field_data,
    vecmem::data::vector_view<track_t>& tracks_data,
    vecmem::data::jagged_vector_view<detail::step_data<algebra_t>>& steps_data,
    detray::sycl::queue_wrapper queue) {

    unsigned int localSize = 64;
    unsigned int globalSize = tracks_data.size();

    const auto num = (globalSize + localSize - 1) / localSize;
    const auto ndrange = ::sycl::nd_range<1>{::sycl::range<1>(num * localSize),
                                             ::sycl::range<1>(localSize)};

    reinterpret_cast<::sycl::queue*>(queue.queue())
        ->submit([&](::sycl::handler& h) {
            h.parallel_for(ndrange, [det_data, cfg, field_data, tracks_data,
                                     steps_data](::sycl::nd_item<1> item) {
                using detector_device_t =
                    detector<typename detector_t::metadata,
                             device_container_types>;

                static_assert(
                    std::is_same_v<typename detector_t::view_type,
                                   typename detector_device_t::view_type>,
                    "Host and device detector views do not match");

                detector_device_t dev_det(det_data);

                vecmem::device_vector<track_t> tracks(tracks_data);
                vecmem::jagged_device_vector<detail::step_data<algebra_t>>
                    steps(steps_data);

                unsigned int gid = item.get_global_linear_id();

                if (gid >= tracks.size()) {
                    return;
                }

                auto stepr = rk_stepper_t<covfie::field_view<bfield_bknd_t>>{};
                auto nav = navigator_t<detector_device_t>{};

                // Create propagator
                using propagator_device_t =
                    propagator<decltype(stepr), decltype(nav),
                               actor_chain_device_t>;
                propagator_device_t p{cfg};

                // Create actor states
                step_tracer_device_t::state tracer_state(steps.at(gid));
                tracer_state.collect_only_on_surface(true);
                pathlimit_aborter::state aborter_state{cfg.stepping.path_limit};
                parameter_transporter<algebra_t>::state transporter_state{};
                pointwise_material_interactor<algebra_t>::state
                    interactor_state{};
                parameter_resetter<algebra_t>::state resetter_state{};

                // Create the actor states
                auto actor_states = ::detray::tie(
                    tracer_state, aborter_state, transporter_state,
                    interactor_state, resetter_state);
                // Create the propagator state
                typename propagator_device_t::state state(tracks[gid],
                                                          field_data, dev_det);

                state._stepping
                    .template set_constraint<step::constraint::e_accuracy>(
                        cfg.stepping.step_constraint);

                p.propagate(state, actor_states);
            });
        })
        .wait_and_throw();
}

/// Explicit instantiation for a constant magnetic field
template void propagator_test<bfield::const_bknd_t,
                              detector<toy_metadata, host_container_types>>(
    detector<toy_metadata, host_container_types>::view_type,
    const propagation::config&, covfie::field_view<bfield::const_bknd_t>,
    vecmem::data::vector_view<track_t>&,
    vecmem::data::jagged_vector_view<detail::step_data<algebra_t>>&,
    detray::sycl::queue_wrapper);

/// Explicit instantiation for an inhomogeneous magnetic field
/*template void propagator_test<bfield::sycl::inhom_bknd_t,
   detector<toy_metadata, host_container_types>>( detector<toy_metadata,
   host_container_types>::view_type,
    const propagation::config&,
    covfie::field_view<bfield::sycl::inhom_bknd_t>,
    vecmem::data::vector_view<track_t>&,
    vecmem::data::jagged_vector_view<detail::step_data<algebra_t>>&,
    detray::sycl::queue_wrapper);*/

}  // namespace detray
